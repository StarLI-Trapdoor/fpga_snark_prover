// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiexp_kernel_HH_
#define _multiexp_kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "multiexp_kernel_point_input_buffer.h"
#include "multiexp_kernel_control_s_axi.h"
#include "multiexp_kernel_point_m_axi.h"
#include "multiexp_kernel_scalar_m_axi.h"
#include "multiexp_kernel_result_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_POINT_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_POINT_ID_WIDTH = 1,
         unsigned int C_M_AXI_POINT_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINT_DATA_WIDTH = 32,
         unsigned int C_M_AXI_POINT_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINT_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINT_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINT_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_SCALAR_ID_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_DATA_WIDTH = 32,
         unsigned int C_M_AXI_SCALAR_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_SCALAR_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_RESULT_ID_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_DATA_WIDTH = 32,
         unsigned int C_M_AXI_RESULT_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_RESULT_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct multiexp_kernel : public sc_module {
    // Port declarations 155
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_point_AWVALID;
    sc_in< sc_logic > m_axi_point_AWREADY;
    sc_out< sc_uint<C_M_AXI_POINT_ADDR_WIDTH> > m_axi_point_AWADDR;
    sc_out< sc_uint<C_M_AXI_POINT_ID_WIDTH> > m_axi_point_AWID;
    sc_out< sc_lv<8> > m_axi_point_AWLEN;
    sc_out< sc_lv<3> > m_axi_point_AWSIZE;
    sc_out< sc_lv<2> > m_axi_point_AWBURST;
    sc_out< sc_lv<2> > m_axi_point_AWLOCK;
    sc_out< sc_lv<4> > m_axi_point_AWCACHE;
    sc_out< sc_lv<3> > m_axi_point_AWPROT;
    sc_out< sc_lv<4> > m_axi_point_AWQOS;
    sc_out< sc_lv<4> > m_axi_point_AWREGION;
    sc_out< sc_uint<C_M_AXI_POINT_AWUSER_WIDTH> > m_axi_point_AWUSER;
    sc_out< sc_logic > m_axi_point_WVALID;
    sc_in< sc_logic > m_axi_point_WREADY;
    sc_out< sc_uint<C_M_AXI_POINT_DATA_WIDTH> > m_axi_point_WDATA;
    sc_out< sc_uint<C_M_AXI_POINT_DATA_WIDTH/8> > m_axi_point_WSTRB;
    sc_out< sc_logic > m_axi_point_WLAST;
    sc_out< sc_uint<C_M_AXI_POINT_ID_WIDTH> > m_axi_point_WID;
    sc_out< sc_uint<C_M_AXI_POINT_WUSER_WIDTH> > m_axi_point_WUSER;
    sc_out< sc_logic > m_axi_point_ARVALID;
    sc_in< sc_logic > m_axi_point_ARREADY;
    sc_out< sc_uint<C_M_AXI_POINT_ADDR_WIDTH> > m_axi_point_ARADDR;
    sc_out< sc_uint<C_M_AXI_POINT_ID_WIDTH> > m_axi_point_ARID;
    sc_out< sc_lv<8> > m_axi_point_ARLEN;
    sc_out< sc_lv<3> > m_axi_point_ARSIZE;
    sc_out< sc_lv<2> > m_axi_point_ARBURST;
    sc_out< sc_lv<2> > m_axi_point_ARLOCK;
    sc_out< sc_lv<4> > m_axi_point_ARCACHE;
    sc_out< sc_lv<3> > m_axi_point_ARPROT;
    sc_out< sc_lv<4> > m_axi_point_ARQOS;
    sc_out< sc_lv<4> > m_axi_point_ARREGION;
    sc_out< sc_uint<C_M_AXI_POINT_ARUSER_WIDTH> > m_axi_point_ARUSER;
    sc_in< sc_logic > m_axi_point_RVALID;
    sc_out< sc_logic > m_axi_point_RREADY;
    sc_in< sc_uint<C_M_AXI_POINT_DATA_WIDTH> > m_axi_point_RDATA;
    sc_in< sc_logic > m_axi_point_RLAST;
    sc_in< sc_uint<C_M_AXI_POINT_ID_WIDTH> > m_axi_point_RID;
    sc_in< sc_uint<C_M_AXI_POINT_RUSER_WIDTH> > m_axi_point_RUSER;
    sc_in< sc_lv<2> > m_axi_point_RRESP;
    sc_in< sc_logic > m_axi_point_BVALID;
    sc_out< sc_logic > m_axi_point_BREADY;
    sc_in< sc_lv<2> > m_axi_point_BRESP;
    sc_in< sc_uint<C_M_AXI_POINT_ID_WIDTH> > m_axi_point_BID;
    sc_in< sc_uint<C_M_AXI_POINT_BUSER_WIDTH> > m_axi_point_BUSER;
    sc_out< sc_logic > m_axi_scalar_AWVALID;
    sc_in< sc_logic > m_axi_scalar_AWREADY;
    sc_out< sc_uint<C_M_AXI_SCALAR_ADDR_WIDTH> > m_axi_scalar_AWADDR;
    sc_out< sc_uint<C_M_AXI_SCALAR_ID_WIDTH> > m_axi_scalar_AWID;
    sc_out< sc_lv<8> > m_axi_scalar_AWLEN;
    sc_out< sc_lv<3> > m_axi_scalar_AWSIZE;
    sc_out< sc_lv<2> > m_axi_scalar_AWBURST;
    sc_out< sc_lv<2> > m_axi_scalar_AWLOCK;
    sc_out< sc_lv<4> > m_axi_scalar_AWCACHE;
    sc_out< sc_lv<3> > m_axi_scalar_AWPROT;
    sc_out< sc_lv<4> > m_axi_scalar_AWQOS;
    sc_out< sc_lv<4> > m_axi_scalar_AWREGION;
    sc_out< sc_uint<C_M_AXI_SCALAR_AWUSER_WIDTH> > m_axi_scalar_AWUSER;
    sc_out< sc_logic > m_axi_scalar_WVALID;
    sc_in< sc_logic > m_axi_scalar_WREADY;
    sc_out< sc_uint<C_M_AXI_SCALAR_DATA_WIDTH> > m_axi_scalar_WDATA;
    sc_out< sc_uint<C_M_AXI_SCALAR_DATA_WIDTH/8> > m_axi_scalar_WSTRB;
    sc_out< sc_logic > m_axi_scalar_WLAST;
    sc_out< sc_uint<C_M_AXI_SCALAR_ID_WIDTH> > m_axi_scalar_WID;
    sc_out< sc_uint<C_M_AXI_SCALAR_WUSER_WIDTH> > m_axi_scalar_WUSER;
    sc_out< sc_logic > m_axi_scalar_ARVALID;
    sc_in< sc_logic > m_axi_scalar_ARREADY;
    sc_out< sc_uint<C_M_AXI_SCALAR_ADDR_WIDTH> > m_axi_scalar_ARADDR;
    sc_out< sc_uint<C_M_AXI_SCALAR_ID_WIDTH> > m_axi_scalar_ARID;
    sc_out< sc_lv<8> > m_axi_scalar_ARLEN;
    sc_out< sc_lv<3> > m_axi_scalar_ARSIZE;
    sc_out< sc_lv<2> > m_axi_scalar_ARBURST;
    sc_out< sc_lv<2> > m_axi_scalar_ARLOCK;
    sc_out< sc_lv<4> > m_axi_scalar_ARCACHE;
    sc_out< sc_lv<3> > m_axi_scalar_ARPROT;
    sc_out< sc_lv<4> > m_axi_scalar_ARQOS;
    sc_out< sc_lv<4> > m_axi_scalar_ARREGION;
    sc_out< sc_uint<C_M_AXI_SCALAR_ARUSER_WIDTH> > m_axi_scalar_ARUSER;
    sc_in< sc_logic > m_axi_scalar_RVALID;
    sc_out< sc_logic > m_axi_scalar_RREADY;
    sc_in< sc_uint<C_M_AXI_SCALAR_DATA_WIDTH> > m_axi_scalar_RDATA;
    sc_in< sc_logic > m_axi_scalar_RLAST;
    sc_in< sc_uint<C_M_AXI_SCALAR_ID_WIDTH> > m_axi_scalar_RID;
    sc_in< sc_uint<C_M_AXI_SCALAR_RUSER_WIDTH> > m_axi_scalar_RUSER;
    sc_in< sc_lv<2> > m_axi_scalar_RRESP;
    sc_in< sc_logic > m_axi_scalar_BVALID;
    sc_out< sc_logic > m_axi_scalar_BREADY;
    sc_in< sc_lv<2> > m_axi_scalar_BRESP;
    sc_in< sc_uint<C_M_AXI_SCALAR_ID_WIDTH> > m_axi_scalar_BID;
    sc_in< sc_uint<C_M_AXI_SCALAR_BUSER_WIDTH> > m_axi_scalar_BUSER;
    sc_out< sc_logic > m_axi_result_AWVALID;
    sc_in< sc_logic > m_axi_result_AWREADY;
    sc_out< sc_uint<C_M_AXI_RESULT_ADDR_WIDTH> > m_axi_result_AWADDR;
    sc_out< sc_uint<C_M_AXI_RESULT_ID_WIDTH> > m_axi_result_AWID;
    sc_out< sc_lv<8> > m_axi_result_AWLEN;
    sc_out< sc_lv<3> > m_axi_result_AWSIZE;
    sc_out< sc_lv<2> > m_axi_result_AWBURST;
    sc_out< sc_lv<2> > m_axi_result_AWLOCK;
    sc_out< sc_lv<4> > m_axi_result_AWCACHE;
    sc_out< sc_lv<3> > m_axi_result_AWPROT;
    sc_out< sc_lv<4> > m_axi_result_AWQOS;
    sc_out< sc_lv<4> > m_axi_result_AWREGION;
    sc_out< sc_uint<C_M_AXI_RESULT_AWUSER_WIDTH> > m_axi_result_AWUSER;
    sc_out< sc_logic > m_axi_result_WVALID;
    sc_in< sc_logic > m_axi_result_WREADY;
    sc_out< sc_uint<C_M_AXI_RESULT_DATA_WIDTH> > m_axi_result_WDATA;
    sc_out< sc_uint<C_M_AXI_RESULT_DATA_WIDTH/8> > m_axi_result_WSTRB;
    sc_out< sc_logic > m_axi_result_WLAST;
    sc_out< sc_uint<C_M_AXI_RESULT_ID_WIDTH> > m_axi_result_WID;
    sc_out< sc_uint<C_M_AXI_RESULT_WUSER_WIDTH> > m_axi_result_WUSER;
    sc_out< sc_logic > m_axi_result_ARVALID;
    sc_in< sc_logic > m_axi_result_ARREADY;
    sc_out< sc_uint<C_M_AXI_RESULT_ADDR_WIDTH> > m_axi_result_ARADDR;
    sc_out< sc_uint<C_M_AXI_RESULT_ID_WIDTH> > m_axi_result_ARID;
    sc_out< sc_lv<8> > m_axi_result_ARLEN;
    sc_out< sc_lv<3> > m_axi_result_ARSIZE;
    sc_out< sc_lv<2> > m_axi_result_ARBURST;
    sc_out< sc_lv<2> > m_axi_result_ARLOCK;
    sc_out< sc_lv<4> > m_axi_result_ARCACHE;
    sc_out< sc_lv<3> > m_axi_result_ARPROT;
    sc_out< sc_lv<4> > m_axi_result_ARQOS;
    sc_out< sc_lv<4> > m_axi_result_ARREGION;
    sc_out< sc_uint<C_M_AXI_RESULT_ARUSER_WIDTH> > m_axi_result_ARUSER;
    sc_in< sc_logic > m_axi_result_RVALID;
    sc_out< sc_logic > m_axi_result_RREADY;
    sc_in< sc_uint<C_M_AXI_RESULT_DATA_WIDTH> > m_axi_result_RDATA;
    sc_in< sc_logic > m_axi_result_RLAST;
    sc_in< sc_uint<C_M_AXI_RESULT_ID_WIDTH> > m_axi_result_RID;
    sc_in< sc_uint<C_M_AXI_RESULT_RUSER_WIDTH> > m_axi_result_RUSER;
    sc_in< sc_lv<2> > m_axi_result_RRESP;
    sc_in< sc_logic > m_axi_result_BVALID;
    sc_out< sc_logic > m_axi_result_BREADY;
    sc_in< sc_lv<2> > m_axi_result_BRESP;
    sc_in< sc_uint<C_M_AXI_RESULT_ID_WIDTH> > m_axi_result_BID;
    sc_in< sc_uint<C_M_AXI_RESULT_BUSER_WIDTH> > m_axi_result_BUSER;
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;


    // Module declarations
    multiexp_kernel(sc_module_name name);
    SC_HAS_PROCESS(multiexp_kernel);

    ~multiexp_kernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    multiexp_kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* multiexp_kernel_control_s_axi_U;
    multiexp_kernel_point_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_POINT_ID_WIDTH,C_M_AXI_POINT_ADDR_WIDTH,C_M_AXI_POINT_DATA_WIDTH,C_M_AXI_POINT_AWUSER_WIDTH,C_M_AXI_POINT_ARUSER_WIDTH,C_M_AXI_POINT_WUSER_WIDTH,C_M_AXI_POINT_RUSER_WIDTH,C_M_AXI_POINT_BUSER_WIDTH,C_M_AXI_POINT_USER_VALUE,C_M_AXI_POINT_PROT_VALUE,C_M_AXI_POINT_CACHE_VALUE>* multiexp_kernel_point_m_axi_U;
    multiexp_kernel_scalar_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_SCALAR_ID_WIDTH,C_M_AXI_SCALAR_ADDR_WIDTH,C_M_AXI_SCALAR_DATA_WIDTH,C_M_AXI_SCALAR_AWUSER_WIDTH,C_M_AXI_SCALAR_ARUSER_WIDTH,C_M_AXI_SCALAR_WUSER_WIDTH,C_M_AXI_SCALAR_RUSER_WIDTH,C_M_AXI_SCALAR_BUSER_WIDTH,C_M_AXI_SCALAR_USER_VALUE,C_M_AXI_SCALAR_PROT_VALUE,C_M_AXI_SCALAR_CACHE_VALUE>* multiexp_kernel_scalar_m_axi_U;
    multiexp_kernel_result_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_RESULT_ID_WIDTH,C_M_AXI_RESULT_ADDR_WIDTH,C_M_AXI_RESULT_DATA_WIDTH,C_M_AXI_RESULT_AWUSER_WIDTH,C_M_AXI_RESULT_ARUSER_WIDTH,C_M_AXI_RESULT_WUSER_WIDTH,C_M_AXI_RESULT_RUSER_WIDTH,C_M_AXI_RESULT_BUSER_WIDTH,C_M_AXI_RESULT_USER_VALUE,C_M_AXI_RESULT_PROT_VALUE,C_M_AXI_RESULT_CACHE_VALUE>* multiexp_kernel_result_m_axi_U;
    multiexp_kernel_point_input_buffer* point_input_buffer_U;
    multiexp_kernel_point_input_buffer* point_output_buffer_U;
    multiexp_kernel_point_input_buffer* scalar_input_buffer_U;
    multiexp_kernel_point_input_buffer* scalar_output_buffer_U;
    multiexp_kernel_point_input_buffer* result_input_buffer_U;
    multiexp_kernel_point_input_buffer* result_output_buffer_U;
    sc_signal< sc_logic > ap_rst_reg_2;
    sc_signal< sc_logic > ap_rst_reg_1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<42> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<64> > num_in;
    sc_signal< sc_lv<64> > point_p;
    sc_signal< sc_lv<64> > scalar_p;
    sc_signal< sc_lv<64> > result_p;
    sc_signal< sc_logic > point_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > point_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln55_reg_705;
    sc_signal< sc_logic > point_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > point_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > point_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln63_reg_738;
    sc_signal< sc_lv<1> > icmp_ln63_reg_738_pp2_iter1_reg;
    sc_signal< sc_logic > scalar_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > scalar_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp3_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter1;
    sc_signal< bool > ap_block_pp3_stage0;
    sc_signal< sc_lv<1> > icmp_ln76_reg_757;
    sc_signal< sc_logic > scalar_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state32;
    sc_signal< sc_logic > scalar_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state41;
    sc_signal< sc_logic > scalar_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp5_iter2;
    sc_signal< bool > ap_block_pp5_stage0;
    sc_signal< sc_lv<1> > icmp_ln84_reg_790;
    sc_signal< sc_lv<1> > icmp_ln84_reg_790_pp5_iter1_reg;
    sc_signal< sc_logic > result_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state36;
    sc_signal< sc_logic > result_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp6_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp6_iter1;
    sc_signal< bool > ap_block_pp6_stage0;
    sc_signal< sc_lv<1> > icmp_ln97_reg_809;
    sc_signal< sc_logic > result_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state49;
    sc_signal< sc_logic > result_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp8_iter2;
    sc_signal< bool > ap_block_pp8_stage0;
    sc_signal< sc_lv<1> > icmp_ln105_reg_842;
    sc_signal< sc_lv<1> > icmp_ln105_reg_842_pp8_iter1_reg;
    sc_signal< sc_logic > result_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state57;
    sc_signal< sc_logic > point_AWVALID;
    sc_signal< sc_logic > point_AWREADY;
    sc_signal< sc_logic > point_WVALID;
    sc_signal< sc_logic > point_WREADY;
    sc_signal< sc_logic > point_ARVALID;
    sc_signal< sc_logic > point_ARREADY;
    sc_signal< sc_logic > point_RVALID;
    sc_signal< sc_logic > point_RREADY;
    sc_signal< sc_lv<32> > point_RDATA;
    sc_signal< sc_logic > point_RLAST;
    sc_signal< sc_lv<1> > point_RID;
    sc_signal< sc_lv<1> > point_RUSER;
    sc_signal< sc_lv<2> > point_RRESP;
    sc_signal< sc_logic > point_BVALID;
    sc_signal< sc_logic > point_BREADY;
    sc_signal< sc_lv<2> > point_BRESP;
    sc_signal< sc_lv<1> > point_BID;
    sc_signal< sc_lv<1> > point_BUSER;
    sc_signal< sc_logic > scalar_AWVALID;
    sc_signal< sc_logic > scalar_AWREADY;
    sc_signal< sc_logic > scalar_WVALID;
    sc_signal< sc_logic > scalar_WREADY;
    sc_signal< sc_logic > scalar_ARVALID;
    sc_signal< sc_logic > scalar_ARREADY;
    sc_signal< sc_logic > scalar_RVALID;
    sc_signal< sc_logic > scalar_RREADY;
    sc_signal< sc_lv<32> > scalar_RDATA;
    sc_signal< sc_logic > scalar_RLAST;
    sc_signal< sc_lv<1> > scalar_RID;
    sc_signal< sc_lv<1> > scalar_RUSER;
    sc_signal< sc_lv<2> > scalar_RRESP;
    sc_signal< sc_logic > scalar_BVALID;
    sc_signal< sc_logic > scalar_BREADY;
    sc_signal< sc_lv<2> > scalar_BRESP;
    sc_signal< sc_lv<1> > scalar_BID;
    sc_signal< sc_lv<1> > scalar_BUSER;
    sc_signal< sc_logic > result_AWVALID;
    sc_signal< sc_logic > result_AWREADY;
    sc_signal< sc_logic > result_WVALID;
    sc_signal< sc_logic > result_WREADY;
    sc_signal< sc_logic > result_ARVALID;
    sc_signal< sc_logic > result_ARREADY;
    sc_signal< sc_logic > result_RVALID;
    sc_signal< sc_logic > result_RREADY;
    sc_signal< sc_lv<32> > result_RDATA;
    sc_signal< sc_logic > result_RLAST;
    sc_signal< sc_lv<1> > result_RID;
    sc_signal< sc_lv<1> > result_RUSER;
    sc_signal< sc_lv<2> > result_RRESP;
    sc_signal< sc_logic > result_BVALID;
    sc_signal< sc_logic > result_BREADY;
    sc_signal< sc_lv<2> > result_BRESP;
    sc_signal< sc_lv<1> > result_BID;
    sc_signal< sc_lv<1> > result_BUSER;
    sc_signal< sc_lv<13> > phi_ln55_reg_348;
    sc_signal< sc_lv<13> > phi_ln55_reg_348_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > i_0_reg_360;
    sc_signal< sc_lv<13> > phi_ln63_reg_371;
    sc_signal< sc_lv<13> > phi_ln76_reg_382;
    sc_signal< sc_lv<13> > phi_ln76_reg_382_pp3_iter1_reg;
    sc_signal< bool > ap_block_state26_pp3_stage0_iter0;
    sc_signal< bool > ap_block_state27_pp3_stage0_iter1;
    sc_signal< bool > ap_block_state28_pp3_stage0_iter2;
    sc_signal< bool > ap_block_pp3_stage0_11001;
    sc_signal< sc_lv<13> > i1_0_reg_394;
    sc_signal< sc_lv<13> > phi_ln84_reg_405;
    sc_signal< sc_lv<13> > phi_ln97_reg_416;
    sc_signal< sc_lv<13> > phi_ln97_reg_416_pp6_iter1_reg;
    sc_signal< bool > ap_block_state43_pp6_stage0_iter0;
    sc_signal< bool > ap_block_state44_pp6_stage0_iter1;
    sc_signal< bool > ap_block_state45_pp6_stage0_iter2;
    sc_signal< bool > ap_block_pp6_stage0_11001;
    sc_signal< sc_lv<13> > i2_0_reg_428;
    sc_signal< sc_lv<13> > phi_ln105_reg_439;
    sc_signal< sc_lv<64> > result_addr_reg_684;
    sc_signal< sc_lv<64> > scalar_addr_reg_691;
    sc_signal< sc_lv<64> > point_addr_reg_698;
    sc_signal< sc_lv<1> > icmp_ln55_fu_510_p2;
    sc_signal< sc_lv<1> > icmp_ln55_reg_705_pp0_iter1_reg;
    sc_signal< sc_lv<13> > add_ln55_fu_516_p2;
    sc_signal< sc_lv<13> > add_ln55_reg_709;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > point_addr_read_reg_714;
    sc_signal< sc_lv<1> > icmp_ln58_fu_527_p2;
    sc_signal< sc_lv<1> > icmp_ln58_reg_719;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<13> > i_fu_533_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<64> > zext_ln59_fu_539_p1;
    sc_signal< sc_lv<64> > zext_ln59_reg_728;
    sc_signal< sc_lv<1> > icmp_ln63_fu_551_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state16_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state17_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state18_pp2_stage0_iter2;
    sc_signal< bool > ap_block_state18_io;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<13> > add_ln63_fu_557_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<32> > point_output_buffer_q0;
    sc_signal< sc_lv<32> > point_output_buffer_load_reg_752;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_lv<1> > icmp_ln76_fu_568_p2;
    sc_signal< sc_lv<1> > icmp_ln76_reg_757_pp3_iter1_reg;
    sc_signal< sc_lv<13> > add_ln76_fu_574_p2;
    sc_signal< sc_lv<13> > add_ln76_reg_761;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter0;
    sc_signal< sc_lv<32> > scalar_addr_read_reg_766;
    sc_signal< sc_lv<1> > icmp_ln79_fu_585_p2;
    sc_signal< sc_lv<1> > icmp_ln79_reg_771;
    sc_signal< sc_logic > ap_CS_fsm_pp4_stage0;
    sc_signal< bool > ap_block_state30_pp4_stage0_iter0;
    sc_signal< bool > ap_block_state31_pp4_stage0_iter1;
    sc_signal< bool > ap_block_pp4_stage0_11001;
    sc_signal< sc_lv<13> > i_1_fu_591_p2;
    sc_signal< sc_logic > ap_enable_reg_pp4_iter0;
    sc_signal< sc_lv<64> > zext_ln80_fu_597_p1;
    sc_signal< sc_lv<64> > zext_ln80_reg_780;
    sc_signal< sc_lv<1> > icmp_ln84_fu_609_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp5_stage0;
    sc_signal< bool > ap_block_state33_pp5_stage0_iter0;
    sc_signal< bool > ap_block_state34_pp5_stage0_iter1;
    sc_signal< bool > ap_block_state35_pp5_stage0_iter2;
    sc_signal< bool > ap_block_state35_io;
    sc_signal< bool > ap_block_pp5_stage0_11001;
    sc_signal< sc_lv<13> > add_ln84_fu_615_p2;
    sc_signal< sc_logic > ap_enable_reg_pp5_iter0;
    sc_signal< sc_lv<32> > scalar_output_buffer_q0;
    sc_signal< sc_lv<32> > scalar_output_buffer_load_reg_804;
    sc_signal< sc_logic > ap_enable_reg_pp5_iter1;
    sc_signal< sc_lv<1> > icmp_ln97_fu_626_p2;
    sc_signal< sc_lv<1> > icmp_ln97_reg_809_pp6_iter1_reg;
    sc_signal< sc_lv<13> > add_ln97_fu_632_p2;
    sc_signal< sc_lv<13> > add_ln97_reg_813;
    sc_signal< sc_logic > ap_enable_reg_pp6_iter0;
    sc_signal< sc_lv<32> > result_addr_read_reg_818;
    sc_signal< sc_lv<1> > icmp_ln100_fu_643_p2;
    sc_signal< sc_lv<1> > icmp_ln100_reg_823;
    sc_signal< sc_logic > ap_CS_fsm_pp7_stage0;
    sc_signal< bool > ap_block_state47_pp7_stage0_iter0;
    sc_signal< bool > ap_block_state48_pp7_stage0_iter1;
    sc_signal< bool > ap_block_pp7_stage0_11001;
    sc_signal< sc_lv<13> > i_2_fu_649_p2;
    sc_signal< sc_logic > ap_enable_reg_pp7_iter0;
    sc_signal< sc_lv<64> > zext_ln101_fu_655_p1;
    sc_signal< sc_lv<64> > zext_ln101_reg_832;
    sc_signal< sc_lv<1> > icmp_ln105_fu_667_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp8_stage0;
    sc_signal< bool > ap_block_state50_pp8_stage0_iter0;
    sc_signal< bool > ap_block_state51_pp8_stage0_iter1;
    sc_signal< bool > ap_block_state52_pp8_stage0_iter2;
    sc_signal< bool > ap_block_state52_io;
    sc_signal< bool > ap_block_pp8_stage0_11001;
    sc_signal< sc_lv<13> > add_ln105_fu_673_p2;
    sc_signal< sc_logic > ap_enable_reg_pp8_iter0;
    sc_signal< sc_lv<32> > result_output_buffer_q0;
    sc_signal< sc_lv<32> > result_output_buffer_load_reg_856;
    sc_signal< sc_logic > ap_enable_reg_pp8_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state13;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state16;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< bool > ap_block_pp3_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp3_exit_iter0_state26;
    sc_signal< sc_logic > ap_enable_reg_pp3_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< bool > ap_block_pp4_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp4_exit_iter0_state30;
    sc_signal< sc_logic > ap_enable_reg_pp4_iter1;
    sc_signal< bool > ap_block_pp5_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp5_exit_iter0_state33;
    sc_signal< sc_logic > ap_CS_fsm_state42;
    sc_signal< bool > ap_block_pp6_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp6_exit_iter0_state43;
    sc_signal< sc_logic > ap_enable_reg_pp6_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state46;
    sc_signal< bool > ap_block_pp7_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp7_exit_iter0_state47;
    sc_signal< sc_logic > ap_enable_reg_pp7_iter1;
    sc_signal< bool > ap_block_pp8_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp8_exit_iter0_state50;
    sc_signal< sc_lv<13> > point_input_buffer_address0;
    sc_signal< sc_logic > point_input_buffer_ce0;
    sc_signal< sc_logic > point_input_buffer_we0;
    sc_signal< sc_lv<32> > point_input_buffer_q0;
    sc_signal< sc_lv<13> > point_output_buffer_address0;
    sc_signal< sc_logic > point_output_buffer_ce0;
    sc_signal< sc_logic > point_output_buffer_we0;
    sc_signal< sc_lv<32> > point_output_buffer_d0;
    sc_signal< sc_lv<13> > scalar_input_buffer_address0;
    sc_signal< sc_logic > scalar_input_buffer_ce0;
    sc_signal< sc_logic > scalar_input_buffer_we0;
    sc_signal< sc_lv<32> > scalar_input_buffer_q0;
    sc_signal< sc_lv<13> > scalar_output_buffer_address0;
    sc_signal< sc_logic > scalar_output_buffer_ce0;
    sc_signal< sc_logic > scalar_output_buffer_we0;
    sc_signal< sc_lv<32> > scalar_output_buffer_d0;
    sc_signal< sc_lv<13> > result_input_buffer_address0;
    sc_signal< sc_logic > result_input_buffer_ce0;
    sc_signal< sc_logic > result_input_buffer_we0;
    sc_signal< sc_lv<32> > result_input_buffer_q0;
    sc_signal< sc_lv<13> > result_output_buffer_address0;
    sc_signal< sc_logic > result_output_buffer_ce0;
    sc_signal< sc_logic > result_output_buffer_we0;
    sc_signal< sc_lv<32> > result_output_buffer_d0;
    sc_signal< sc_lv<13> > ap_phi_mux_phi_ln55_phi_fu_352_p4;
    sc_signal< sc_lv<13> > ap_phi_mux_phi_ln76_phi_fu_386_p4;
    sc_signal< sc_lv<13> > ap_phi_mux_phi_ln97_phi_fu_420_p4;
    sc_signal< sc_lv<64> > zext_ln55_fu_522_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > zext_ln63_fu_563_p1;
    sc_signal< sc_lv<64> > zext_ln76_fu_580_p1;
    sc_signal< bool > ap_block_pp4_stage0;
    sc_signal< sc_lv<64> > zext_ln84_fu_621_p1;
    sc_signal< sc_lv<64> > zext_ln97_fu_638_p1;
    sc_signal< bool > ap_block_pp7_stage0;
    sc_signal< sc_lv<64> > zext_ln105_fu_679_p1;
    sc_signal< sc_lv<64> > empty_fu_460_p1;
    sc_signal< sc_lv<64> > empty_5_fu_480_p1;
    sc_signal< sc_lv<64> > empty_6_fu_500_p1;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< bool > ap_block_pp5_stage0_01001;
    sc_signal< bool > ap_block_pp8_stage0_01001;
    sc_signal< sc_lv<62> > result_p5_fu_450_p4;
    sc_signal< sc_lv<62> > scalar_p3_fu_470_p4;
    sc_signal< sc_lv<62> > point_p1_fu_490_p4;
    sc_signal< sc_lv<42> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > ap_idle_pp3;
    sc_signal< sc_logic > ap_enable_pp3;
    sc_signal< sc_logic > ap_idle_pp4;
    sc_signal< sc_logic > ap_enable_pp4;
    sc_signal< sc_logic > ap_idle_pp5;
    sc_signal< sc_logic > ap_enable_pp5;
    sc_signal< sc_logic > ap_idle_pp6;
    sc_signal< sc_logic > ap_enable_pp6;
    sc_signal< sc_logic > ap_idle_pp7;
    sc_signal< sc_logic > ap_enable_pp7;
    sc_signal< sc_logic > ap_idle_pp8;
    sc_signal< sc_logic > ap_enable_pp8;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<42> ap_ST_fsm_state1;
    static const sc_lv<42> ap_ST_fsm_state2;
    static const sc_lv<42> ap_ST_fsm_state3;
    static const sc_lv<42> ap_ST_fsm_state4;
    static const sc_lv<42> ap_ST_fsm_state5;
    static const sc_lv<42> ap_ST_fsm_state6;
    static const sc_lv<42> ap_ST_fsm_state7;
    static const sc_lv<42> ap_ST_fsm_state8;
    static const sc_lv<42> ap_ST_fsm_pp0_stage0;
    static const sc_lv<42> ap_ST_fsm_state12;
    static const sc_lv<42> ap_ST_fsm_pp1_stage0;
    static const sc_lv<42> ap_ST_fsm_state15;
    static const sc_lv<42> ap_ST_fsm_pp2_stage0;
    static const sc_lv<42> ap_ST_fsm_state19;
    static const sc_lv<42> ap_ST_fsm_state20;
    static const sc_lv<42> ap_ST_fsm_state21;
    static const sc_lv<42> ap_ST_fsm_state22;
    static const sc_lv<42> ap_ST_fsm_state23;
    static const sc_lv<42> ap_ST_fsm_state24;
    static const sc_lv<42> ap_ST_fsm_state25;
    static const sc_lv<42> ap_ST_fsm_pp3_stage0;
    static const sc_lv<42> ap_ST_fsm_state29;
    static const sc_lv<42> ap_ST_fsm_pp4_stage0;
    static const sc_lv<42> ap_ST_fsm_state32;
    static const sc_lv<42> ap_ST_fsm_pp5_stage0;
    static const sc_lv<42> ap_ST_fsm_state36;
    static const sc_lv<42> ap_ST_fsm_state37;
    static const sc_lv<42> ap_ST_fsm_state38;
    static const sc_lv<42> ap_ST_fsm_state39;
    static const sc_lv<42> ap_ST_fsm_state40;
    static const sc_lv<42> ap_ST_fsm_state41;
    static const sc_lv<42> ap_ST_fsm_state42;
    static const sc_lv<42> ap_ST_fsm_pp6_stage0;
    static const sc_lv<42> ap_ST_fsm_state46;
    static const sc_lv<42> ap_ST_fsm_pp7_stage0;
    static const sc_lv<42> ap_ST_fsm_state49;
    static const sc_lv<42> ap_ST_fsm_pp8_stage0;
    static const sc_lv<42> ap_ST_fsm_state53;
    static const sc_lv<42> ap_ST_fsm_state54;
    static const sc_lv<42> ap_ST_fsm_state55;
    static const sc_lv<42> ap_ST_fsm_state56;
    static const sc_lv<42> ap_ST_fsm_state57;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_29;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_POINT_USER_VALUE;
    static const int C_M_AXI_POINT_PROT_VALUE;
    static const int C_M_AXI_POINT_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_SCALAR_USER_VALUE;
    static const int C_M_AXI_SCALAR_PROT_VALUE;
    static const int C_M_AXI_SCALAR_CACHE_VALUE;
    static const int C_M_AXI_RESULT_USER_VALUE;
    static const int C_M_AXI_RESULT_PROT_VALUE;
    static const int C_M_AXI_RESULT_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_22;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_21;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_1000;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_add_ln105_fu_673_p2();
    void thread_add_ln55_fu_516_p2();
    void thread_add_ln63_fu_557_p2();
    void thread_add_ln76_fu_574_p2();
    void thread_add_ln84_fu_615_p2();
    void thread_add_ln97_fu_632_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_pp3_stage0();
    void thread_ap_CS_fsm_pp4_stage0();
    void thread_ap_CS_fsm_pp5_stage0();
    void thread_ap_CS_fsm_pp6_stage0();
    void thread_ap_CS_fsm_pp7_stage0();
    void thread_ap_CS_fsm_pp8_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state32();
    void thread_ap_CS_fsm_state36();
    void thread_ap_CS_fsm_state41();
    void thread_ap_CS_fsm_state42();
    void thread_ap_CS_fsm_state46();
    void thread_ap_CS_fsm_state49();
    void thread_ap_CS_fsm_state57();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_pp3_stage0();
    void thread_ap_block_pp3_stage0_11001();
    void thread_ap_block_pp3_stage0_subdone();
    void thread_ap_block_pp4_stage0();
    void thread_ap_block_pp4_stage0_11001();
    void thread_ap_block_pp4_stage0_subdone();
    void thread_ap_block_pp5_stage0();
    void thread_ap_block_pp5_stage0_01001();
    void thread_ap_block_pp5_stage0_11001();
    void thread_ap_block_pp5_stage0_subdone();
    void thread_ap_block_pp6_stage0();
    void thread_ap_block_pp6_stage0_11001();
    void thread_ap_block_pp6_stage0_subdone();
    void thread_ap_block_pp7_stage0();
    void thread_ap_block_pp7_stage0_11001();
    void thread_ap_block_pp7_stage0_subdone();
    void thread_ap_block_pp8_stage0();
    void thread_ap_block_pp8_stage0_01001();
    void thread_ap_block_pp8_stage0_11001();
    void thread_ap_block_pp8_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter0();
    void thread_ap_block_state14_pp1_stage0_iter1();
    void thread_ap_block_state16_pp2_stage0_iter0();
    void thread_ap_block_state17_pp2_stage0_iter1();
    void thread_ap_block_state18_io();
    void thread_ap_block_state18_pp2_stage0_iter2();
    void thread_ap_block_state26_pp3_stage0_iter0();
    void thread_ap_block_state27_pp3_stage0_iter1();
    void thread_ap_block_state28_pp3_stage0_iter2();
    void thread_ap_block_state30_pp4_stage0_iter0();
    void thread_ap_block_state31_pp4_stage0_iter1();
    void thread_ap_block_state33_pp5_stage0_iter0();
    void thread_ap_block_state34_pp5_stage0_iter1();
    void thread_ap_block_state35_io();
    void thread_ap_block_state35_pp5_stage0_iter2();
    void thread_ap_block_state43_pp6_stage0_iter0();
    void thread_ap_block_state44_pp6_stage0_iter1();
    void thread_ap_block_state45_pp6_stage0_iter2();
    void thread_ap_block_state47_pp7_stage0_iter0();
    void thread_ap_block_state48_pp7_stage0_iter1();
    void thread_ap_block_state50_pp8_stage0_iter0();
    void thread_ap_block_state51_pp8_stage0_iter1();
    void thread_ap_block_state52_io();
    void thread_ap_block_state52_pp8_stage0_iter2();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_condition_pp1_exit_iter0_state13();
    void thread_ap_condition_pp2_exit_iter0_state16();
    void thread_ap_condition_pp3_exit_iter0_state26();
    void thread_ap_condition_pp4_exit_iter0_state30();
    void thread_ap_condition_pp5_exit_iter0_state33();
    void thread_ap_condition_pp6_exit_iter0_state43();
    void thread_ap_condition_pp7_exit_iter0_state47();
    void thread_ap_condition_pp8_exit_iter0_state50();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_enable_pp3();
    void thread_ap_enable_pp4();
    void thread_ap_enable_pp5();
    void thread_ap_enable_pp6();
    void thread_ap_enable_pp7();
    void thread_ap_enable_pp8();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_idle_pp3();
    void thread_ap_idle_pp4();
    void thread_ap_idle_pp5();
    void thread_ap_idle_pp6();
    void thread_ap_idle_pp7();
    void thread_ap_idle_pp8();
    void thread_ap_phi_mux_phi_ln55_phi_fu_352_p4();
    void thread_ap_phi_mux_phi_ln76_phi_fu_386_p4();
    void thread_ap_phi_mux_phi_ln97_phi_fu_420_p4();
    void thread_ap_ready();
    void thread_empty_5_fu_480_p1();
    void thread_empty_6_fu_500_p1();
    void thread_empty_fu_460_p1();
    void thread_i_1_fu_591_p2();
    void thread_i_2_fu_649_p2();
    void thread_i_fu_533_p2();
    void thread_icmp_ln100_fu_643_p2();
    void thread_icmp_ln105_fu_667_p2();
    void thread_icmp_ln55_fu_510_p2();
    void thread_icmp_ln58_fu_527_p2();
    void thread_icmp_ln63_fu_551_p2();
    void thread_icmp_ln76_fu_568_p2();
    void thread_icmp_ln79_fu_585_p2();
    void thread_icmp_ln84_fu_609_p2();
    void thread_icmp_ln97_fu_626_p2();
    void thread_point_ARVALID();
    void thread_point_AWVALID();
    void thread_point_BREADY();
    void thread_point_RREADY();
    void thread_point_WVALID();
    void thread_point_blk_n_AR();
    void thread_point_blk_n_AW();
    void thread_point_blk_n_B();
    void thread_point_blk_n_R();
    void thread_point_blk_n_W();
    void thread_point_input_buffer_address0();
    void thread_point_input_buffer_ce0();
    void thread_point_input_buffer_we0();
    void thread_point_output_buffer_address0();
    void thread_point_output_buffer_ce0();
    void thread_point_output_buffer_d0();
    void thread_point_output_buffer_we0();
    void thread_point_p1_fu_490_p4();
    void thread_result_ARVALID();
    void thread_result_AWVALID();
    void thread_result_BREADY();
    void thread_result_RREADY();
    void thread_result_WVALID();
    void thread_result_blk_n_AR();
    void thread_result_blk_n_AW();
    void thread_result_blk_n_B();
    void thread_result_blk_n_R();
    void thread_result_blk_n_W();
    void thread_result_input_buffer_address0();
    void thread_result_input_buffer_ce0();
    void thread_result_input_buffer_we0();
    void thread_result_output_buffer_address0();
    void thread_result_output_buffer_ce0();
    void thread_result_output_buffer_d0();
    void thread_result_output_buffer_we0();
    void thread_result_p5_fu_450_p4();
    void thread_scalar_ARVALID();
    void thread_scalar_AWVALID();
    void thread_scalar_BREADY();
    void thread_scalar_RREADY();
    void thread_scalar_WVALID();
    void thread_scalar_blk_n_AR();
    void thread_scalar_blk_n_AW();
    void thread_scalar_blk_n_B();
    void thread_scalar_blk_n_R();
    void thread_scalar_blk_n_W();
    void thread_scalar_input_buffer_address0();
    void thread_scalar_input_buffer_ce0();
    void thread_scalar_input_buffer_we0();
    void thread_scalar_output_buffer_address0();
    void thread_scalar_output_buffer_ce0();
    void thread_scalar_output_buffer_d0();
    void thread_scalar_output_buffer_we0();
    void thread_scalar_p3_fu_470_p4();
    void thread_zext_ln101_fu_655_p1();
    void thread_zext_ln105_fu_679_p1();
    void thread_zext_ln55_fu_522_p1();
    void thread_zext_ln59_fu_539_p1();
    void thread_zext_ln63_fu_563_p1();
    void thread_zext_ln76_fu_580_p1();
    void thread_zext_ln80_fu_597_p1();
    void thread_zext_ln84_fu_621_p1();
    void thread_zext_ln97_fu_638_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
