-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multiexp_kernel is
generic (
    C_M_AXI_POINT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_POINT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_POINT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_POINT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_SCALAR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SCALAR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SCALAR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RESULT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RESULT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_POINT_USER_VALUE : INTEGER := 0;
    C_M_AXI_POINT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_POINT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_SCALAR_USER_VALUE : INTEGER := 0;
    C_M_AXI_SCALAR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SCALAR_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_RESULT_USER_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_point_AWVALID : OUT STD_LOGIC;
    m_axi_point_AWREADY : IN STD_LOGIC;
    m_axi_point_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ADDR_WIDTH-1 downto 0);
    m_axi_point_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ID_WIDTH-1 downto 0);
    m_axi_point_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_point_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_point_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_point_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_AWUSER_WIDTH-1 downto 0);
    m_axi_point_WVALID : OUT STD_LOGIC;
    m_axi_point_WREADY : IN STD_LOGIC;
    m_axi_point_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_DATA_WIDTH-1 downto 0);
    m_axi_point_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_DATA_WIDTH/8-1 downto 0);
    m_axi_point_WLAST : OUT STD_LOGIC;
    m_axi_point_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ID_WIDTH-1 downto 0);
    m_axi_point_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_WUSER_WIDTH-1 downto 0);
    m_axi_point_ARVALID : OUT STD_LOGIC;
    m_axi_point_ARREADY : IN STD_LOGIC;
    m_axi_point_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ADDR_WIDTH-1 downto 0);
    m_axi_point_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ID_WIDTH-1 downto 0);
    m_axi_point_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_point_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_point_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_point_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_point_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINT_ARUSER_WIDTH-1 downto 0);
    m_axi_point_RVALID : IN STD_LOGIC;
    m_axi_point_RREADY : OUT STD_LOGIC;
    m_axi_point_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_POINT_DATA_WIDTH-1 downto 0);
    m_axi_point_RLAST : IN STD_LOGIC;
    m_axi_point_RID : IN STD_LOGIC_VECTOR (C_M_AXI_POINT_ID_WIDTH-1 downto 0);
    m_axi_point_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POINT_RUSER_WIDTH-1 downto 0);
    m_axi_point_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_BVALID : IN STD_LOGIC;
    m_axi_point_BREADY : OUT STD_LOGIC;
    m_axi_point_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_point_BID : IN STD_LOGIC_VECTOR (C_M_AXI_POINT_ID_WIDTH-1 downto 0);
    m_axi_point_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POINT_BUSER_WIDTH-1 downto 0);
    m_axi_scalar_AWVALID : OUT STD_LOGIC;
    m_axi_scalar_AWREADY : IN STD_LOGIC;
    m_axi_scalar_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ADDR_WIDTH-1 downto 0);
    m_axi_scalar_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ID_WIDTH-1 downto 0);
    m_axi_scalar_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_scalar_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_scalar_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_scalar_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_AWUSER_WIDTH-1 downto 0);
    m_axi_scalar_WVALID : OUT STD_LOGIC;
    m_axi_scalar_WREADY : IN STD_LOGIC;
    m_axi_scalar_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_DATA_WIDTH-1 downto 0);
    m_axi_scalar_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_DATA_WIDTH/8-1 downto 0);
    m_axi_scalar_WLAST : OUT STD_LOGIC;
    m_axi_scalar_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ID_WIDTH-1 downto 0);
    m_axi_scalar_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_WUSER_WIDTH-1 downto 0);
    m_axi_scalar_ARVALID : OUT STD_LOGIC;
    m_axi_scalar_ARREADY : IN STD_LOGIC;
    m_axi_scalar_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ADDR_WIDTH-1 downto 0);
    m_axi_scalar_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ID_WIDTH-1 downto 0);
    m_axi_scalar_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_scalar_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_scalar_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_scalar_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_scalar_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ARUSER_WIDTH-1 downto 0);
    m_axi_scalar_RVALID : IN STD_LOGIC;
    m_axi_scalar_RREADY : OUT STD_LOGIC;
    m_axi_scalar_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SCALAR_DATA_WIDTH-1 downto 0);
    m_axi_scalar_RLAST : IN STD_LOGIC;
    m_axi_scalar_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ID_WIDTH-1 downto 0);
    m_axi_scalar_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SCALAR_RUSER_WIDTH-1 downto 0);
    m_axi_scalar_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_BVALID : IN STD_LOGIC;
    m_axi_scalar_BREADY : OUT STD_LOGIC;
    m_axi_scalar_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_scalar_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SCALAR_ID_WIDTH-1 downto 0);
    m_axi_scalar_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SCALAR_BUSER_WIDTH-1 downto 0);
    m_axi_result_AWVALID : OUT STD_LOGIC;
    m_axi_result_AWREADY : IN STD_LOGIC;
    m_axi_result_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_result_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_result_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_result_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_AWUSER_WIDTH-1 downto 0);
    m_axi_result_WVALID : OUT STD_LOGIC;
    m_axi_result_WREADY : IN STD_LOGIC;
    m_axi_result_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_result_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH/8-1 downto 0);
    m_axi_result_WLAST : OUT STD_LOGIC;
    m_axi_result_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_result_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_WUSER_WIDTH-1 downto 0);
    m_axi_result_ARVALID : OUT STD_LOGIC;
    m_axi_result_ARREADY : IN STD_LOGIC;
    m_axi_result_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_result_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_result_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_result_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_result_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_result_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ARUSER_WIDTH-1 downto 0);
    m_axi_result_RVALID : IN STD_LOGIC;
    m_axi_result_RREADY : OUT STD_LOGIC;
    m_axi_result_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_result_RLAST : IN STD_LOGIC;
    m_axi_result_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_result_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_RUSER_WIDTH-1 downto 0);
    m_axi_result_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_BVALID : IN STD_LOGIC;
    m_axi_result_BREADY : OUT STD_LOGIC;
    m_axi_result_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_result_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_result_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of multiexp_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multiexp_kernel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=36911,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=2548,HLS_SYN_LUT=3357,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal num_in : STD_LOGIC_VECTOR (63 downto 0);
    signal point_p : STD_LOGIC_VECTOR (63 downto 0);
    signal scalar_p : STD_LOGIC_VECTOR (63 downto 0);
    signal result_p : STD_LOGIC_VECTOR (63 downto 0);
    signal point_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal point_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln55_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal point_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal point_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal point_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln63_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_738_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal scalar_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln76_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal scalar_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal scalar_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln84_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_790_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal result_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln97_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal result_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln105_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_842_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal result_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal point_AWVALID : STD_LOGIC;
    signal point_AWREADY : STD_LOGIC;
    signal point_WVALID : STD_LOGIC;
    signal point_WREADY : STD_LOGIC;
    signal point_ARVALID : STD_LOGIC;
    signal point_ARREADY : STD_LOGIC;
    signal point_RVALID : STD_LOGIC;
    signal point_RREADY : STD_LOGIC;
    signal point_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal point_RLAST : STD_LOGIC;
    signal point_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal point_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal point_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal point_BVALID : STD_LOGIC;
    signal point_BREADY : STD_LOGIC;
    signal point_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal point_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal point_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_AWVALID : STD_LOGIC;
    signal scalar_AWREADY : STD_LOGIC;
    signal scalar_WVALID : STD_LOGIC;
    signal scalar_WREADY : STD_LOGIC;
    signal scalar_ARVALID : STD_LOGIC;
    signal scalar_ARREADY : STD_LOGIC;
    signal scalar_RVALID : STD_LOGIC;
    signal scalar_RREADY : STD_LOGIC;
    signal scalar_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_RLAST : STD_LOGIC;
    signal scalar_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal scalar_BVALID : STD_LOGIC;
    signal scalar_BREADY : STD_LOGIC;
    signal scalar_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal scalar_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal scalar_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal result_AWVALID : STD_LOGIC;
    signal result_AWREADY : STD_LOGIC;
    signal result_WVALID : STD_LOGIC;
    signal result_WREADY : STD_LOGIC;
    signal result_ARVALID : STD_LOGIC;
    signal result_ARREADY : STD_LOGIC;
    signal result_RVALID : STD_LOGIC;
    signal result_RREADY : STD_LOGIC;
    signal result_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal result_RLAST : STD_LOGIC;
    signal result_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal result_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal result_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal result_BVALID : STD_LOGIC;
    signal result_BREADY : STD_LOGIC;
    signal result_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal result_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal result_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln55_reg_348 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln55_reg_348_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_360 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln63_reg_371 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln76_reg_382 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln76_reg_382_pp3_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i1_0_reg_394 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln84_reg_405 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln97_reg_416 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln97_reg_416_pp6_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state43_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal i2_0_reg_428 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_ln105_reg_439 : STD_LOGIC_VECTOR (12 downto 0);
    signal result_addr_reg_684 : STD_LOGIC_VECTOR (63 downto 0);
    signal scalar_addr_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal point_addr_reg_698 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln55_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_705_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_516_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln55_reg_709 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal point_addr_read_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln58_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_fu_533_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln59_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_reg_728 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln63_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state16_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln63_fu_557_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal point_output_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal point_output_buffer_load_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal icmp_ln76_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_757_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_574_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_reg_761 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal scalar_addr_read_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln79_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state30_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal i_1_fu_591_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln80_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln84_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state33_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln84_fu_615_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal scalar_output_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_output_buffer_load_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal icmp_ln97_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_809_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_fu_632_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln97_reg_813 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal result_addr_read_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state47_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal i_2_fu_649_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal zext_ln101_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln105_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state50_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state52_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state52_io : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal add_ln105_fu_673_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal result_output_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_output_buffer_load_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state16 : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state33 : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state47 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state50 : STD_LOGIC;
    signal point_input_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal point_input_buffer_ce0 : STD_LOGIC;
    signal point_input_buffer_we0 : STD_LOGIC;
    signal point_input_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal point_output_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal point_output_buffer_ce0 : STD_LOGIC;
    signal point_output_buffer_we0 : STD_LOGIC;
    signal point_output_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_input_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal scalar_input_buffer_ce0 : STD_LOGIC;
    signal scalar_input_buffer_we0 : STD_LOGIC;
    signal scalar_input_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal scalar_output_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal scalar_output_buffer_ce0 : STD_LOGIC;
    signal scalar_output_buffer_we0 : STD_LOGIC;
    signal scalar_output_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_input_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal result_input_buffer_ce0 : STD_LOGIC;
    signal result_input_buffer_we0 : STD_LOGIC;
    signal result_input_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_output_buffer_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal result_output_buffer_ce0 : STD_LOGIC;
    signal result_output_buffer_we0 : STD_LOGIC;
    signal result_output_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln55_phi_fu_352_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_phi_ln76_phi_fu_386_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_phi_mux_phi_ln97_phi_fu_420_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln55_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln63_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln84_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal zext_ln105_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_6_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal result_p5_fu_450_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal scalar_p3_fu_470_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal point_p1_fu_490_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;

    component multiexp_kernel_point_input_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component multiexp_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        num_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        point_p : OUT STD_LOGIC_VECTOR (63 downto 0);
        scalar_p : OUT STD_LOGIC_VECTOR (63 downto 0);
        result_p : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component multiexp_kernel_point_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component multiexp_kernel_scalar_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component multiexp_kernel_result_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    multiexp_kernel_control_s_axi_U : component multiexp_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        num_in => num_in,
        point_p => point_p,
        scalar_p => scalar_p,
        result_p => result_p);

    multiexp_kernel_point_m_axi_U : component multiexp_kernel_point_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_POINT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_POINT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_POINT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_POINT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_POINT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_POINT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_POINT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_POINT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_POINT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_POINT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_POINT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_point_AWVALID,
        AWREADY => m_axi_point_AWREADY,
        AWADDR => m_axi_point_AWADDR,
        AWID => m_axi_point_AWID,
        AWLEN => m_axi_point_AWLEN,
        AWSIZE => m_axi_point_AWSIZE,
        AWBURST => m_axi_point_AWBURST,
        AWLOCK => m_axi_point_AWLOCK,
        AWCACHE => m_axi_point_AWCACHE,
        AWPROT => m_axi_point_AWPROT,
        AWQOS => m_axi_point_AWQOS,
        AWREGION => m_axi_point_AWREGION,
        AWUSER => m_axi_point_AWUSER,
        WVALID => m_axi_point_WVALID,
        WREADY => m_axi_point_WREADY,
        WDATA => m_axi_point_WDATA,
        WSTRB => m_axi_point_WSTRB,
        WLAST => m_axi_point_WLAST,
        WID => m_axi_point_WID,
        WUSER => m_axi_point_WUSER,
        ARVALID => m_axi_point_ARVALID,
        ARREADY => m_axi_point_ARREADY,
        ARADDR => m_axi_point_ARADDR,
        ARID => m_axi_point_ARID,
        ARLEN => m_axi_point_ARLEN,
        ARSIZE => m_axi_point_ARSIZE,
        ARBURST => m_axi_point_ARBURST,
        ARLOCK => m_axi_point_ARLOCK,
        ARCACHE => m_axi_point_ARCACHE,
        ARPROT => m_axi_point_ARPROT,
        ARQOS => m_axi_point_ARQOS,
        ARREGION => m_axi_point_ARREGION,
        ARUSER => m_axi_point_ARUSER,
        RVALID => m_axi_point_RVALID,
        RREADY => m_axi_point_RREADY,
        RDATA => m_axi_point_RDATA,
        RLAST => m_axi_point_RLAST,
        RID => m_axi_point_RID,
        RUSER => m_axi_point_RUSER,
        RRESP => m_axi_point_RRESP,
        BVALID => m_axi_point_BVALID,
        BREADY => m_axi_point_BREADY,
        BRESP => m_axi_point_BRESP,
        BID => m_axi_point_BID,
        BUSER => m_axi_point_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => point_ARVALID,
        I_ARREADY => point_ARREADY,
        I_ARADDR => point_addr_reg_698,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => point_RVALID,
        I_RREADY => point_RREADY,
        I_RDATA => point_RDATA,
        I_RID => point_RID,
        I_RUSER => point_RUSER,
        I_RRESP => point_RRESP,
        I_RLAST => point_RLAST,
        I_AWVALID => point_AWVALID,
        I_AWREADY => point_AWREADY,
        I_AWADDR => point_addr_reg_698,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => point_WVALID,
        I_WREADY => point_WREADY,
        I_WDATA => point_output_buffer_load_reg_752,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => point_BVALID,
        I_BREADY => point_BREADY,
        I_BRESP => point_BRESP,
        I_BID => point_BID,
        I_BUSER => point_BUSER);

    multiexp_kernel_scalar_m_axi_U : component multiexp_kernel_scalar_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SCALAR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SCALAR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SCALAR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SCALAR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SCALAR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SCALAR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SCALAR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SCALAR_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_SCALAR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SCALAR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SCALAR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_scalar_AWVALID,
        AWREADY => m_axi_scalar_AWREADY,
        AWADDR => m_axi_scalar_AWADDR,
        AWID => m_axi_scalar_AWID,
        AWLEN => m_axi_scalar_AWLEN,
        AWSIZE => m_axi_scalar_AWSIZE,
        AWBURST => m_axi_scalar_AWBURST,
        AWLOCK => m_axi_scalar_AWLOCK,
        AWCACHE => m_axi_scalar_AWCACHE,
        AWPROT => m_axi_scalar_AWPROT,
        AWQOS => m_axi_scalar_AWQOS,
        AWREGION => m_axi_scalar_AWREGION,
        AWUSER => m_axi_scalar_AWUSER,
        WVALID => m_axi_scalar_WVALID,
        WREADY => m_axi_scalar_WREADY,
        WDATA => m_axi_scalar_WDATA,
        WSTRB => m_axi_scalar_WSTRB,
        WLAST => m_axi_scalar_WLAST,
        WID => m_axi_scalar_WID,
        WUSER => m_axi_scalar_WUSER,
        ARVALID => m_axi_scalar_ARVALID,
        ARREADY => m_axi_scalar_ARREADY,
        ARADDR => m_axi_scalar_ARADDR,
        ARID => m_axi_scalar_ARID,
        ARLEN => m_axi_scalar_ARLEN,
        ARSIZE => m_axi_scalar_ARSIZE,
        ARBURST => m_axi_scalar_ARBURST,
        ARLOCK => m_axi_scalar_ARLOCK,
        ARCACHE => m_axi_scalar_ARCACHE,
        ARPROT => m_axi_scalar_ARPROT,
        ARQOS => m_axi_scalar_ARQOS,
        ARREGION => m_axi_scalar_ARREGION,
        ARUSER => m_axi_scalar_ARUSER,
        RVALID => m_axi_scalar_RVALID,
        RREADY => m_axi_scalar_RREADY,
        RDATA => m_axi_scalar_RDATA,
        RLAST => m_axi_scalar_RLAST,
        RID => m_axi_scalar_RID,
        RUSER => m_axi_scalar_RUSER,
        RRESP => m_axi_scalar_RRESP,
        BVALID => m_axi_scalar_BVALID,
        BREADY => m_axi_scalar_BREADY,
        BRESP => m_axi_scalar_BRESP,
        BID => m_axi_scalar_BID,
        BUSER => m_axi_scalar_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => scalar_ARVALID,
        I_ARREADY => scalar_ARREADY,
        I_ARADDR => scalar_addr_reg_691,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => scalar_RVALID,
        I_RREADY => scalar_RREADY,
        I_RDATA => scalar_RDATA,
        I_RID => scalar_RID,
        I_RUSER => scalar_RUSER,
        I_RRESP => scalar_RRESP,
        I_RLAST => scalar_RLAST,
        I_AWVALID => scalar_AWVALID,
        I_AWREADY => scalar_AWREADY,
        I_AWADDR => scalar_addr_reg_691,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => scalar_WVALID,
        I_WREADY => scalar_WREADY,
        I_WDATA => scalar_output_buffer_load_reg_804,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => scalar_BVALID,
        I_BREADY => scalar_BREADY,
        I_BRESP => scalar_BRESP,
        I_BID => scalar_BID,
        I_BUSER => scalar_BUSER);

    multiexp_kernel_result_m_axi_U : component multiexp_kernel_result_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_RESULT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RESULT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RESULT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RESULT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RESULT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RESULT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RESULT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RESULT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RESULT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RESULT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RESULT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_result_AWVALID,
        AWREADY => m_axi_result_AWREADY,
        AWADDR => m_axi_result_AWADDR,
        AWID => m_axi_result_AWID,
        AWLEN => m_axi_result_AWLEN,
        AWSIZE => m_axi_result_AWSIZE,
        AWBURST => m_axi_result_AWBURST,
        AWLOCK => m_axi_result_AWLOCK,
        AWCACHE => m_axi_result_AWCACHE,
        AWPROT => m_axi_result_AWPROT,
        AWQOS => m_axi_result_AWQOS,
        AWREGION => m_axi_result_AWREGION,
        AWUSER => m_axi_result_AWUSER,
        WVALID => m_axi_result_WVALID,
        WREADY => m_axi_result_WREADY,
        WDATA => m_axi_result_WDATA,
        WSTRB => m_axi_result_WSTRB,
        WLAST => m_axi_result_WLAST,
        WID => m_axi_result_WID,
        WUSER => m_axi_result_WUSER,
        ARVALID => m_axi_result_ARVALID,
        ARREADY => m_axi_result_ARREADY,
        ARADDR => m_axi_result_ARADDR,
        ARID => m_axi_result_ARID,
        ARLEN => m_axi_result_ARLEN,
        ARSIZE => m_axi_result_ARSIZE,
        ARBURST => m_axi_result_ARBURST,
        ARLOCK => m_axi_result_ARLOCK,
        ARCACHE => m_axi_result_ARCACHE,
        ARPROT => m_axi_result_ARPROT,
        ARQOS => m_axi_result_ARQOS,
        ARREGION => m_axi_result_ARREGION,
        ARUSER => m_axi_result_ARUSER,
        RVALID => m_axi_result_RVALID,
        RREADY => m_axi_result_RREADY,
        RDATA => m_axi_result_RDATA,
        RLAST => m_axi_result_RLAST,
        RID => m_axi_result_RID,
        RUSER => m_axi_result_RUSER,
        RRESP => m_axi_result_RRESP,
        BVALID => m_axi_result_BVALID,
        BREADY => m_axi_result_BREADY,
        BRESP => m_axi_result_BRESP,
        BID => m_axi_result_BID,
        BUSER => m_axi_result_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => result_ARVALID,
        I_ARREADY => result_ARREADY,
        I_ARADDR => result_addr_reg_684,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1000,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => result_RVALID,
        I_RREADY => result_RREADY,
        I_RDATA => result_RDATA,
        I_RID => result_RID,
        I_RUSER => result_RUSER,
        I_RRESP => result_RRESP,
        I_RLAST => result_RLAST,
        I_AWVALID => result_AWVALID,
        I_AWREADY => result_AWREADY,
        I_AWADDR => result_addr_reg_684,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1000,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => result_WVALID,
        I_WREADY => result_WREADY,
        I_WDATA => result_output_buffer_load_reg_856,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => result_BVALID,
        I_BREADY => result_BREADY,
        I_BRESP => result_BRESP,
        I_BID => result_BID,
        I_BUSER => result_BUSER);

    point_input_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => point_input_buffer_address0,
        ce0 => point_input_buffer_ce0,
        we0 => point_input_buffer_we0,
        d0 => point_addr_read_reg_714,
        q0 => point_input_buffer_q0);

    point_output_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => point_output_buffer_address0,
        ce0 => point_output_buffer_ce0,
        we0 => point_output_buffer_we0,
        d0 => point_output_buffer_d0,
        q0 => point_output_buffer_q0);

    scalar_input_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => scalar_input_buffer_address0,
        ce0 => scalar_input_buffer_ce0,
        we0 => scalar_input_buffer_we0,
        d0 => scalar_addr_read_reg_766,
        q0 => scalar_input_buffer_q0);

    scalar_output_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => scalar_output_buffer_address0,
        ce0 => scalar_output_buffer_ce0,
        we0 => scalar_output_buffer_we0,
        d0 => scalar_output_buffer_d0,
        q0 => scalar_output_buffer_q0);

    result_input_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_input_buffer_address0,
        ce0 => result_input_buffer_ce0,
        we0 => result_input_buffer_we0,
        d0 => result_addr_read_reg_818,
        q0 => result_input_buffer_q0);

    result_output_buffer_U : component multiexp_kernel_point_input_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => result_output_buffer_address0,
        ce0 => result_output_buffer_ce0,
        we0 => result_output_buffer_we0,
        d0 => result_output_buffer_d0,
        q0 => result_output_buffer_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((point_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state16)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((point_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state30))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state30);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((scalar_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state33)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((scalar_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state43);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state47) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state47) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state47);
                elsif ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state50) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((result_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state50)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state50);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif (((result_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i1_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i1_0_reg_394 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_fu_585_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i1_0_reg_394 <= i_1_fu_591_p2;
            end if; 
        end if;
    end process;

    i2_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i2_0_reg_428 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln100_fu_643_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i2_0_reg_428 <= i_2_fu_649_p2;
            end if; 
        end if;
    end process;

    i_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_reg_360 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln58_fu_527_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_0_reg_360 <= i_fu_533_p2;
            end if; 
        end if;
    end process;

    phi_ln105_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((result_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                phi_ln105_reg_439 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln105_fu_667_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                phi_ln105_reg_439 <= add_ln105_fu_673_p2;
            end if; 
        end if;
    end process;

    phi_ln55_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln55_reg_348 <= add_ln55_reg_709;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln55_reg_348 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_ln63_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((point_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_ln63_reg_371 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln63_fu_551_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_ln63_reg_371 <= add_ln63_fu_557_p2;
            end if; 
        end if;
    end process;

    phi_ln76_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                phi_ln76_reg_382 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                phi_ln76_reg_382 <= add_ln76_reg_761;
            end if; 
        end if;
    end process;

    phi_ln84_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((scalar_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                phi_ln84_reg_405 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln84_fu_609_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                phi_ln84_reg_405 <= add_ln84_fu_615_p2;
            end if; 
        end if;
    end process;

    phi_ln97_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                phi_ln97_reg_416 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                phi_ln97_reg_416 <= add_ln97_reg_813;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln55_reg_709 <= add_ln55_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln76_reg_761 <= add_ln76_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln97_reg_813 <= add_ln97_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln100_reg_823 <= icmp_ln100_fu_643_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                icmp_ln105_reg_842 <= icmp_ln105_fu_667_p2;
                icmp_ln105_reg_842_pp8_iter1_reg <= icmp_ln105_reg_842;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln55_reg_705 <= icmp_ln55_fu_510_p2;
                icmp_ln55_reg_705_pp0_iter1_reg <= icmp_ln55_reg_705;
                phi_ln55_reg_348_pp0_iter1_reg <= phi_ln55_reg_348;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln58_reg_719 <= icmp_ln58_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln63_reg_738 <= icmp_ln63_fu_551_p2;
                icmp_ln63_reg_738_pp2_iter1_reg <= icmp_ln63_reg_738;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln76_reg_757 <= icmp_ln76_fu_568_p2;
                icmp_ln76_reg_757_pp3_iter1_reg <= icmp_ln76_reg_757;
                phi_ln76_reg_382_pp3_iter1_reg <= phi_ln76_reg_382;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln79_reg_771 <= icmp_ln79_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln84_reg_790 <= icmp_ln84_fu_609_p2;
                icmp_ln84_reg_790_pp5_iter1_reg <= icmp_ln84_reg_790;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln97_reg_809 <= icmp_ln97_fu_626_p2;
                icmp_ln97_reg_809_pp6_iter1_reg <= icmp_ln97_reg_809;
                phi_ln97_reg_416_pp6_iter1_reg <= phi_ln97_reg_416;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                point_addr_read_reg_714 <= point_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    point_addr_reg_698(61 downto 0) <= empty_6_fu_500_p1(61 downto 0);
                    result_addr_reg_684(61 downto 0) <= empty_fu_460_p1(61 downto 0);
                    scalar_addr_reg_691(61 downto 0) <= empty_5_fu_480_p1(61 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln63_reg_738 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                point_output_buffer_load_reg_752 <= point_output_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                result_addr_read_reg_818 <= result_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln105_reg_842 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                result_output_buffer_load_reg_856 <= result_output_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                scalar_addr_read_reg_766 <= scalar_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln84_reg_790 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                scalar_output_buffer_load_reg_804 <= scalar_output_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln100_fu_643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                    zext_ln101_reg_832(12 downto 0) <= zext_ln101_fu_655_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln58_fu_527_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    zext_ln59_reg_728(12 downto 0) <= zext_ln59_fu_539_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    zext_ln80_reg_780(12 downto 0) <= zext_ln80_fu_597_p1(12 downto 0);
            end if;
        end if;
    end process;
    result_addr_reg_684(63 downto 62) <= "00";
    scalar_addr_reg_691(63 downto 62) <= "00";
    point_addr_reg_698(63 downto 62) <= "00";
    zext_ln59_reg_728(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln80_reg_780(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln101_reg_832(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_enable_reg_pp2_iter2, ap_CS_fsm_state19, ap_enable_reg_pp3_iter1, ap_CS_fsm_state32, ap_CS_fsm_state41, ap_enable_reg_pp5_iter2, ap_CS_fsm_state36, ap_enable_reg_pp6_iter1, ap_CS_fsm_state49, ap_enable_reg_pp8_iter2, ap_CS_fsm_state57, point_AWREADY, point_ARREADY, point_BVALID, scalar_AWREADY, scalar_ARREADY, scalar_BVALID, result_AWREADY, result_ARREADY, result_BVALID, icmp_ln55_fu_510_p2, ap_enable_reg_pp0_iter0, icmp_ln58_fu_527_p2, ap_enable_reg_pp1_iter0, icmp_ln63_fu_551_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln76_fu_568_p2, ap_enable_reg_pp3_iter0, icmp_ln79_fu_585_p2, ap_enable_reg_pp4_iter0, icmp_ln84_fu_609_p2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, icmp_ln97_fu_626_p2, ap_enable_reg_pp6_iter0, icmp_ln100_fu_643_p2, ap_enable_reg_pp7_iter0, icmp_ln105_fu_667_p2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, ap_block_pp7_stage0_subdone, ap_block_pp8_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((point_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln55_fu_510_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln55_fu_510_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln58_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln58_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((point_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln63_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln63_fu_551_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                if (((scalar_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((point_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln76_fu_568_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln76_fu_568_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln79_fu_585_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln79_fu_585_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                if (((scalar_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln84_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln84_fu_609_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state36 => 
                if (((result_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((scalar_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln97_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln97_fu_626_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((icmp_ln100_fu_643_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((icmp_ln100_fu_643_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state49 => 
                if (((result_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (icmp_ln105_fu_667_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) and not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (icmp_ln105_fu_667_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((result_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln105_fu_673_p2 <= std_logic_vector(unsigned(phi_ln105_reg_439) + unsigned(ap_const_lv13_1));
    add_ln55_fu_516_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln55_phi_fu_352_p4) + unsigned(ap_const_lv13_1));
    add_ln63_fu_557_p2 <= std_logic_vector(unsigned(phi_ln63_reg_371) + unsigned(ap_const_lv13_1));
    add_ln76_fu_574_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln76_phi_fu_386_p4) + unsigned(ap_const_lv13_1));
    add_ln84_fu_615_p2 <= std_logic_vector(unsigned(phi_ln84_reg_405) + unsigned(ap_const_lv13_1));
    add_ln97_fu_632_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln97_phi_fu_420_p4) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(32);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(36);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state29 <= ap_CS_fsm(21);
    ap_CS_fsm_state32 <= ap_CS_fsm(23);
    ap_CS_fsm_state36 <= ap_CS_fsm(25);
    ap_CS_fsm_state41 <= ap_CS_fsm(30);
    ap_CS_fsm_state42 <= ap_CS_fsm(31);
    ap_CS_fsm_state46 <= ap_CS_fsm(33);
    ap_CS_fsm_state49 <= ap_CS_fsm(35);
    ap_CS_fsm_state57 <= ap_CS_fsm(41);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_705, point_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((point_RVALID = ap_const_logic_0) and (icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_705, point_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((point_RVALID = ap_const_logic_0) and (icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state18_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state18_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state18_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln76_reg_757, scalar_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((scalar_RVALID = ap_const_logic_0) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln76_reg_757, scalar_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((scalar_RVALID = ap_const_logic_0) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter2, ap_block_state35_io)
    begin
                ap_block_pp5_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter2, ap_block_state35_io)
    begin
                ap_block_pp5_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln97_reg_809, result_RVALID)
    begin
                ap_block_pp6_stage0_11001 <= ((result_RVALID = ap_const_logic_0) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln97_reg_809, result_RVALID)
    begin
                ap_block_pp6_stage0_subdone <= ((result_RVALID = ap_const_logic_0) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state52_io)
    begin
                ap_block_pp8_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state52_io)
    begin
                ap_block_pp8_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln55_reg_705, point_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((point_RVALID = ap_const_logic_0) and (icmp_ln55_reg_705 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(icmp_ln63_reg_738_pp2_iter1_reg, point_WREADY)
    begin
                ap_block_state18_io <= ((point_WREADY = ap_const_logic_0) and (icmp_ln63_reg_738_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_pp3_stage0_iter1_assign_proc : process(icmp_ln76_reg_757, scalar_RVALID)
    begin
                ap_block_state27_pp3_stage0_iter1 <= ((scalar_RVALID = ap_const_logic_0) and (icmp_ln76_reg_757 = ap_const_lv1_0));
    end process;

        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(icmp_ln84_reg_790_pp5_iter1_reg, scalar_WREADY)
    begin
                ap_block_state35_io <= ((scalar_WREADY = ap_const_logic_0) and (icmp_ln84_reg_790_pp5_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state35_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_pp6_stage0_iter1_assign_proc : process(icmp_ln97_reg_809, result_RVALID)
    begin
                ap_block_state44_pp6_stage0_iter1 <= ((result_RVALID = ap_const_logic_0) and (icmp_ln97_reg_809 = ap_const_lv1_0));
    end process;

        ap_block_state45_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state52_io_assign_proc : process(icmp_ln105_reg_842_pp8_iter1_reg, result_WREADY)
    begin
                ap_block_state52_io <= ((result_WREADY = ap_const_logic_0) and (icmp_ln105_reg_842_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state52_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln55_fu_510_p2)
    begin
        if ((icmp_ln55_fu_510_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln58_fu_527_p2)
    begin
        if ((icmp_ln58_fu_527_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state16_assign_proc : process(icmp_ln63_fu_551_p2)
    begin
        if ((icmp_ln63_fu_551_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(icmp_ln76_fu_568_p2)
    begin
        if ((icmp_ln76_fu_568_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state30_assign_proc : process(icmp_ln79_fu_585_p2)
    begin
        if ((icmp_ln79_fu_585_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state33_assign_proc : process(icmp_ln84_fu_609_p2)
    begin
        if ((icmp_ln84_fu_609_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state43_assign_proc : process(icmp_ln97_fu_626_p2)
    begin
        if ((icmp_ln97_fu_626_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state47_assign_proc : process(icmp_ln100_fu_643_p2)
    begin
        if ((icmp_ln100_fu_643_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state47 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state50_assign_proc : process(icmp_ln105_fu_667_p2)
    begin
        if ((icmp_ln105_fu_667_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state57, result_BVALID)
    begin
        if (((result_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln55_phi_fu_352_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln55_reg_705, phi_ln55_reg_348, add_ln55_reg_709)
    begin
        if (((icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_ln55_phi_fu_352_p4 <= add_ln55_reg_709;
        else 
            ap_phi_mux_phi_ln55_phi_fu_352_p4 <= phi_ln55_reg_348;
        end if; 
    end process;


    ap_phi_mux_phi_ln76_phi_fu_386_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln76_reg_757, phi_ln76_reg_382, add_ln76_reg_761)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_phi_ln76_phi_fu_386_p4 <= add_ln76_reg_761;
        else 
            ap_phi_mux_phi_ln76_phi_fu_386_p4 <= phi_ln76_reg_382;
        end if; 
    end process;


    ap_phi_mux_phi_ln97_phi_fu_420_p4_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln97_reg_809, phi_ln97_reg_416, add_ln97_reg_813)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_phi_mux_phi_ln97_phi_fu_420_p4 <= add_ln97_reg_813;
        else 
            ap_phi_mux_phi_ln97_phi_fu_420_p4 <= phi_ln97_reg_416;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state57, result_BVALID)
    begin
        if (((result_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_5_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scalar_p3_fu_470_p4),64));
    empty_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(point_p1_fu_490_p4),64));
    empty_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_p5_fu_450_p4),64));
    i_1_fu_591_p2 <= std_logic_vector(unsigned(i1_0_reg_394) + unsigned(ap_const_lv13_1));
    i_2_fu_649_p2 <= std_logic_vector(unsigned(i2_0_reg_428) + unsigned(ap_const_lv13_1));
    i_fu_533_p2 <= std_logic_vector(unsigned(i_0_reg_360) + unsigned(ap_const_lv13_1));
    icmp_ln100_fu_643_p2 <= "1" when (i2_0_reg_428 = ap_const_lv13_1000) else "0";
    icmp_ln105_fu_667_p2 <= "1" when (phi_ln105_reg_439 = ap_const_lv13_1000) else "0";
    icmp_ln55_fu_510_p2 <= "1" when (ap_phi_mux_phi_ln55_phi_fu_352_p4 = ap_const_lv13_1000) else "0";
    icmp_ln58_fu_527_p2 <= "1" when (i_0_reg_360 = ap_const_lv13_1000) else "0";
    icmp_ln63_fu_551_p2 <= "1" when (phi_ln63_reg_371 = ap_const_lv13_1000) else "0";
    icmp_ln76_fu_568_p2 <= "1" when (ap_phi_mux_phi_ln76_phi_fu_386_p4 = ap_const_lv13_1000) else "0";
    icmp_ln79_fu_585_p2 <= "1" when (i1_0_reg_394 = ap_const_lv13_1000) else "0";
    icmp_ln84_fu_609_p2 <= "1" when (phi_ln84_reg_405 = ap_const_lv13_1000) else "0";
    icmp_ln97_fu_626_p2 <= "1" when (ap_phi_mux_phi_ln97_phi_fu_420_p4 = ap_const_lv13_1000) else "0";

    point_ARVALID_assign_proc : process(ap_CS_fsm_state2, point_ARREADY)
    begin
        if (((point_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            point_ARVALID <= ap_const_logic_1;
        else 
            point_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    point_AWVALID_assign_proc : process(ap_CS_fsm_state15, point_AWREADY)
    begin
        if (((point_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            point_AWVALID <= ap_const_logic_1;
        else 
            point_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    point_BREADY_assign_proc : process(ap_CS_fsm_state24, point_BVALID)
    begin
        if (((point_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            point_BREADY <= ap_const_logic_1;
        else 
            point_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    point_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_reg_705, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            point_RREADY <= ap_const_logic_1;
        else 
            point_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    point_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln63_reg_738_pp2_iter1_reg, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln63_reg_738_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            point_WVALID <= ap_const_logic_1;
        else 
            point_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    point_blk_n_AR_assign_proc : process(m_axi_point_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            point_blk_n_AR <= m_axi_point_ARREADY;
        else 
            point_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    point_blk_n_AW_assign_proc : process(m_axi_point_AWREADY, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            point_blk_n_AW <= m_axi_point_AWREADY;
        else 
            point_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    point_blk_n_B_assign_proc : process(m_axi_point_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            point_blk_n_B <= m_axi_point_BVALID;
        else 
            point_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    point_blk_n_R_assign_proc : process(m_axi_point_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln55_reg_705)
    begin
        if (((icmp_ln55_reg_705 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            point_blk_n_R <= m_axi_point_RVALID;
        else 
            point_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    point_blk_n_W_assign_proc : process(m_axi_point_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln63_reg_738_pp2_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln63_reg_738_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            point_blk_n_W <= m_axi_point_WREADY;
        else 
            point_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    point_input_buffer_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln59_fu_539_p1, ap_enable_reg_pp0_iter2, zext_ln55_fu_522_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            point_input_buffer_address0 <= zext_ln59_fu_539_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            point_input_buffer_address0 <= zext_ln55_fu_522_p1(13 - 1 downto 0);
        else 
            point_input_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    point_input_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            point_input_buffer_ce0 <= ap_const_logic_1;
        else 
            point_input_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    point_input_buffer_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln55_reg_705_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_705_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            point_input_buffer_we0 <= ap_const_logic_1;
        else 
            point_input_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    point_output_buffer_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, zext_ln59_reg_728, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln63_fu_563_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            point_output_buffer_address0 <= zext_ln63_fu_563_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            point_output_buffer_address0 <= zext_ln59_reg_728(13 - 1 downto 0);
        else 
            point_output_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    point_output_buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            point_output_buffer_ce0 <= ap_const_logic_1;
        else 
            point_output_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    point_output_buffer_d0 <= std_logic_vector(unsigned(point_input_buffer_q0) + unsigned(ap_const_lv32_1));

    point_output_buffer_we0_assign_proc : process(icmp_ln58_reg_719, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln58_reg_719 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            point_output_buffer_we0 <= ap_const_logic_1;
        else 
            point_output_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    point_p1_fu_490_p4 <= point_p(63 downto 2);

    result_ARVALID_assign_proc : process(ap_CS_fsm_state36, result_ARREADY)
    begin
        if (((result_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            result_ARVALID <= ap_const_logic_1;
        else 
            result_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    result_AWVALID_assign_proc : process(ap_CS_fsm_state49, result_AWREADY)
    begin
        if (((result_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            result_AWVALID <= ap_const_logic_1;
        else 
            result_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    result_BREADY_assign_proc : process(ap_CS_fsm_state57, result_BVALID)
    begin
        if (((result_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            result_BREADY <= ap_const_logic_1;
        else 
            result_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    result_RREADY_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, icmp_ln97_reg_809, ap_block_pp6_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            result_RREADY <= ap_const_logic_1;
        else 
            result_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    result_WVALID_assign_proc : process(ap_enable_reg_pp8_iter2, icmp_ln105_reg_842_pp8_iter1_reg, ap_block_pp8_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (icmp_ln105_reg_842_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            result_WVALID <= ap_const_logic_1;
        else 
            result_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    result_blk_n_AR_assign_proc : process(m_axi_result_ARREADY, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            result_blk_n_AR <= m_axi_result_ARREADY;
        else 
            result_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_AW_assign_proc : process(m_axi_result_AWREADY, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            result_blk_n_AW <= m_axi_result_AWREADY;
        else 
            result_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_B_assign_proc : process(m_axi_result_BVALID, ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            result_blk_n_B <= m_axi_result_BVALID;
        else 
            result_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_R_assign_proc : process(m_axi_result_RVALID, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln97_reg_809)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln97_reg_809 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            result_blk_n_R <= m_axi_result_RVALID;
        else 
            result_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    result_blk_n_W_assign_proc : process(m_axi_result_WREADY, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0, icmp_ln105_reg_842_pp8_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (icmp_ln105_reg_842_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            result_blk_n_W <= m_axi_result_WREADY;
        else 
            result_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    result_input_buffer_address0_assign_proc : process(ap_block_pp6_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln101_fu_655_p1, ap_enable_reg_pp6_iter2, zext_ln97_fu_638_p1, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            result_input_buffer_address0 <= zext_ln101_fu_655_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            result_input_buffer_address0 <= zext_ln97_fu_638_p1(13 - 1 downto 0);
        else 
            result_input_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    result_input_buffer_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_enable_reg_pp6_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)))) then 
            result_input_buffer_ce0 <= ap_const_logic_1;
        else 
            result_input_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_input_buffer_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln97_reg_809_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln97_reg_809_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            result_input_buffer_we0 <= ap_const_logic_1;
        else 
            result_input_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_output_buffer_address0_assign_proc : process(ap_block_pp8_stage0, ap_CS_fsm_pp7_stage0, zext_ln101_reg_832, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, zext_ln105_fu_679_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            result_output_buffer_address0 <= zext_ln105_fu_679_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            result_output_buffer_address0 <= zext_ln101_reg_832(13 - 1 downto 0);
        else 
            result_output_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    result_output_buffer_ce0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter0, ap_enable_reg_pp7_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)))) then 
            result_output_buffer_ce0 <= ap_const_logic_1;
        else 
            result_output_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_output_buffer_d0 <= std_logic_vector(unsigned(result_input_buffer_q0) + unsigned(ap_const_lv32_1));

    result_output_buffer_we0_assign_proc : process(icmp_ln100_reg_823, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln100_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            result_output_buffer_we0 <= ap_const_logic_1;
        else 
            result_output_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_p5_fu_450_p4 <= result_p(63 downto 2);

    scalar_ARVALID_assign_proc : process(ap_CS_fsm_state19, scalar_ARREADY)
    begin
        if (((scalar_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            scalar_ARVALID <= ap_const_logic_1;
        else 
            scalar_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    scalar_AWVALID_assign_proc : process(ap_CS_fsm_state32, scalar_AWREADY)
    begin
        if (((scalar_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            scalar_AWVALID <= ap_const_logic_1;
        else 
            scalar_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    scalar_BREADY_assign_proc : process(ap_CS_fsm_state41, scalar_BVALID)
    begin
        if (((scalar_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            scalar_BREADY <= ap_const_logic_1;
        else 
            scalar_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    scalar_RREADY_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln76_reg_757, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            scalar_RREADY <= ap_const_logic_1;
        else 
            scalar_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    scalar_WVALID_assign_proc : process(ap_enable_reg_pp5_iter2, icmp_ln84_reg_790_pp5_iter1_reg, ap_block_pp5_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln84_reg_790_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            scalar_WVALID <= ap_const_logic_1;
        else 
            scalar_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    scalar_blk_n_AR_assign_proc : process(m_axi_scalar_ARREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            scalar_blk_n_AR <= m_axi_scalar_ARREADY;
        else 
            scalar_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    scalar_blk_n_AW_assign_proc : process(m_axi_scalar_AWREADY, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            scalar_blk_n_AW <= m_axi_scalar_AWREADY;
        else 
            scalar_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    scalar_blk_n_B_assign_proc : process(m_axi_scalar_BVALID, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            scalar_blk_n_B <= m_axi_scalar_BVALID;
        else 
            scalar_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    scalar_blk_n_R_assign_proc : process(m_axi_scalar_RVALID, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln76_reg_757)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln76_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            scalar_blk_n_R <= m_axi_scalar_RVALID;
        else 
            scalar_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    scalar_blk_n_W_assign_proc : process(m_axi_scalar_WREADY, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0, icmp_ln84_reg_790_pp5_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln84_reg_790_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            scalar_blk_n_W <= m_axi_scalar_WREADY;
        else 
            scalar_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    scalar_input_buffer_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln80_fu_597_p1, ap_enable_reg_pp3_iter2, zext_ln76_fu_580_p1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            scalar_input_buffer_address0 <= zext_ln80_fu_597_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            scalar_input_buffer_address0 <= zext_ln76_fu_580_p1(13 - 1 downto 0);
        else 
            scalar_input_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    scalar_input_buffer_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then 
            scalar_input_buffer_ce0 <= ap_const_logic_1;
        else 
            scalar_input_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    scalar_input_buffer_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln76_reg_757_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln76_reg_757_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            scalar_input_buffer_we0 <= ap_const_logic_1;
        else 
            scalar_input_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    scalar_output_buffer_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_pp4_stage0, zext_ln80_reg_780, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, zext_ln84_fu_621_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            scalar_output_buffer_address0 <= zext_ln84_fu_621_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            scalar_output_buffer_address0 <= zext_ln80_reg_780(13 - 1 downto 0);
        else 
            scalar_output_buffer_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    scalar_output_buffer_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            scalar_output_buffer_ce0 <= ap_const_logic_1;
        else 
            scalar_output_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    scalar_output_buffer_d0 <= std_logic_vector(unsigned(scalar_input_buffer_q0) + unsigned(ap_const_lv32_1));

    scalar_output_buffer_we0_assign_proc : process(icmp_ln79_reg_771, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln79_reg_771 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            scalar_output_buffer_we0 <= ap_const_logic_1;
        else 
            scalar_output_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    scalar_p3_fu_470_p4 <= scalar_p(63 downto 2);
    zext_ln101_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_428),64));
    zext_ln105_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln105_reg_439),64));
    zext_ln55_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln55_reg_348_pp0_iter1_reg),64));
    zext_ln59_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_360),64));
    zext_ln63_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln63_reg_371),64));
    zext_ln76_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln76_reg_382_pp3_iter1_reg),64));
    zext_ln80_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_394),64));
    zext_ln84_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln84_reg_405),64));
    zext_ln97_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln97_reg_416_pp6_iter1_reg),64));
end behav;
