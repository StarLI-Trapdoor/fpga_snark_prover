// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="multiexp_kernel,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=36911,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=2548,HLS_SYN_LUT=3357,HLS_VERSION=2019_2}" *)

module multiexp_kernel (
        ap_clk,
        ap_rst_n,
        m_axi_point_AWVALID,
        m_axi_point_AWREADY,
        m_axi_point_AWADDR,
        m_axi_point_AWID,
        m_axi_point_AWLEN,
        m_axi_point_AWSIZE,
        m_axi_point_AWBURST,
        m_axi_point_AWLOCK,
        m_axi_point_AWCACHE,
        m_axi_point_AWPROT,
        m_axi_point_AWQOS,
        m_axi_point_AWREGION,
        m_axi_point_AWUSER,
        m_axi_point_WVALID,
        m_axi_point_WREADY,
        m_axi_point_WDATA,
        m_axi_point_WSTRB,
        m_axi_point_WLAST,
        m_axi_point_WID,
        m_axi_point_WUSER,
        m_axi_point_ARVALID,
        m_axi_point_ARREADY,
        m_axi_point_ARADDR,
        m_axi_point_ARID,
        m_axi_point_ARLEN,
        m_axi_point_ARSIZE,
        m_axi_point_ARBURST,
        m_axi_point_ARLOCK,
        m_axi_point_ARCACHE,
        m_axi_point_ARPROT,
        m_axi_point_ARQOS,
        m_axi_point_ARREGION,
        m_axi_point_ARUSER,
        m_axi_point_RVALID,
        m_axi_point_RREADY,
        m_axi_point_RDATA,
        m_axi_point_RLAST,
        m_axi_point_RID,
        m_axi_point_RUSER,
        m_axi_point_RRESP,
        m_axi_point_BVALID,
        m_axi_point_BREADY,
        m_axi_point_BRESP,
        m_axi_point_BID,
        m_axi_point_BUSER,
        m_axi_scalar_AWVALID,
        m_axi_scalar_AWREADY,
        m_axi_scalar_AWADDR,
        m_axi_scalar_AWID,
        m_axi_scalar_AWLEN,
        m_axi_scalar_AWSIZE,
        m_axi_scalar_AWBURST,
        m_axi_scalar_AWLOCK,
        m_axi_scalar_AWCACHE,
        m_axi_scalar_AWPROT,
        m_axi_scalar_AWQOS,
        m_axi_scalar_AWREGION,
        m_axi_scalar_AWUSER,
        m_axi_scalar_WVALID,
        m_axi_scalar_WREADY,
        m_axi_scalar_WDATA,
        m_axi_scalar_WSTRB,
        m_axi_scalar_WLAST,
        m_axi_scalar_WID,
        m_axi_scalar_WUSER,
        m_axi_scalar_ARVALID,
        m_axi_scalar_ARREADY,
        m_axi_scalar_ARADDR,
        m_axi_scalar_ARID,
        m_axi_scalar_ARLEN,
        m_axi_scalar_ARSIZE,
        m_axi_scalar_ARBURST,
        m_axi_scalar_ARLOCK,
        m_axi_scalar_ARCACHE,
        m_axi_scalar_ARPROT,
        m_axi_scalar_ARQOS,
        m_axi_scalar_ARREGION,
        m_axi_scalar_ARUSER,
        m_axi_scalar_RVALID,
        m_axi_scalar_RREADY,
        m_axi_scalar_RDATA,
        m_axi_scalar_RLAST,
        m_axi_scalar_RID,
        m_axi_scalar_RUSER,
        m_axi_scalar_RRESP,
        m_axi_scalar_BVALID,
        m_axi_scalar_BREADY,
        m_axi_scalar_BRESP,
        m_axi_scalar_BID,
        m_axi_scalar_BUSER,
        m_axi_result_AWVALID,
        m_axi_result_AWREADY,
        m_axi_result_AWADDR,
        m_axi_result_AWID,
        m_axi_result_AWLEN,
        m_axi_result_AWSIZE,
        m_axi_result_AWBURST,
        m_axi_result_AWLOCK,
        m_axi_result_AWCACHE,
        m_axi_result_AWPROT,
        m_axi_result_AWQOS,
        m_axi_result_AWREGION,
        m_axi_result_AWUSER,
        m_axi_result_WVALID,
        m_axi_result_WREADY,
        m_axi_result_WDATA,
        m_axi_result_WSTRB,
        m_axi_result_WLAST,
        m_axi_result_WID,
        m_axi_result_WUSER,
        m_axi_result_ARVALID,
        m_axi_result_ARREADY,
        m_axi_result_ARADDR,
        m_axi_result_ARID,
        m_axi_result_ARLEN,
        m_axi_result_ARSIZE,
        m_axi_result_ARBURST,
        m_axi_result_ARLOCK,
        m_axi_result_ARCACHE,
        m_axi_result_ARPROT,
        m_axi_result_ARQOS,
        m_axi_result_ARREGION,
        m_axi_result_ARUSER,
        m_axi_result_RVALID,
        m_axi_result_RREADY,
        m_axi_result_RDATA,
        m_axi_result_RLAST,
        m_axi_result_RID,
        m_axi_result_RUSER,
        m_axi_result_RRESP,
        m_axi_result_BVALID,
        m_axi_result_BREADY,
        m_axi_result_BRESP,
        m_axi_result_BID,
        m_axi_result_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_pp0_stage0 = 42'd256;
parameter    ap_ST_fsm_state12 = 42'd512;
parameter    ap_ST_fsm_pp1_stage0 = 42'd1024;
parameter    ap_ST_fsm_state15 = 42'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 42'd4096;
parameter    ap_ST_fsm_state19 = 42'd8192;
parameter    ap_ST_fsm_state20 = 42'd16384;
parameter    ap_ST_fsm_state21 = 42'd32768;
parameter    ap_ST_fsm_state22 = 42'd65536;
parameter    ap_ST_fsm_state23 = 42'd131072;
parameter    ap_ST_fsm_state24 = 42'd262144;
parameter    ap_ST_fsm_state25 = 42'd524288;
parameter    ap_ST_fsm_pp3_stage0 = 42'd1048576;
parameter    ap_ST_fsm_state29 = 42'd2097152;
parameter    ap_ST_fsm_pp4_stage0 = 42'd4194304;
parameter    ap_ST_fsm_state32 = 42'd8388608;
parameter    ap_ST_fsm_pp5_stage0 = 42'd16777216;
parameter    ap_ST_fsm_state36 = 42'd33554432;
parameter    ap_ST_fsm_state37 = 42'd67108864;
parameter    ap_ST_fsm_state38 = 42'd134217728;
parameter    ap_ST_fsm_state39 = 42'd268435456;
parameter    ap_ST_fsm_state40 = 42'd536870912;
parameter    ap_ST_fsm_state41 = 42'd1073741824;
parameter    ap_ST_fsm_state42 = 42'd2147483648;
parameter    ap_ST_fsm_pp6_stage0 = 42'd4294967296;
parameter    ap_ST_fsm_state46 = 42'd8589934592;
parameter    ap_ST_fsm_pp7_stage0 = 42'd17179869184;
parameter    ap_ST_fsm_state49 = 42'd34359738368;
parameter    ap_ST_fsm_pp8_stage0 = 42'd68719476736;
parameter    ap_ST_fsm_state53 = 42'd137438953472;
parameter    ap_ST_fsm_state54 = 42'd274877906944;
parameter    ap_ST_fsm_state55 = 42'd549755813888;
parameter    ap_ST_fsm_state56 = 42'd1099511627776;
parameter    ap_ST_fsm_state57 = 42'd2199023255552;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_POINT_ID_WIDTH = 1;
parameter    C_M_AXI_POINT_ADDR_WIDTH = 64;
parameter    C_M_AXI_POINT_DATA_WIDTH = 32;
parameter    C_M_AXI_POINT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_POINT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_POINT_WUSER_WIDTH = 1;
parameter    C_M_AXI_POINT_RUSER_WIDTH = 1;
parameter    C_M_AXI_POINT_BUSER_WIDTH = 1;
parameter    C_M_AXI_POINT_USER_VALUE = 0;
parameter    C_M_AXI_POINT_PROT_VALUE = 0;
parameter    C_M_AXI_POINT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_SCALAR_ID_WIDTH = 1;
parameter    C_M_AXI_SCALAR_ADDR_WIDTH = 64;
parameter    C_M_AXI_SCALAR_DATA_WIDTH = 32;
parameter    C_M_AXI_SCALAR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SCALAR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SCALAR_WUSER_WIDTH = 1;
parameter    C_M_AXI_SCALAR_RUSER_WIDTH = 1;
parameter    C_M_AXI_SCALAR_BUSER_WIDTH = 1;
parameter    C_M_AXI_SCALAR_USER_VALUE = 0;
parameter    C_M_AXI_SCALAR_PROT_VALUE = 0;
parameter    C_M_AXI_SCALAR_CACHE_VALUE = 3;
parameter    C_M_AXI_RESULT_ID_WIDTH = 1;
parameter    C_M_AXI_RESULT_ADDR_WIDTH = 64;
parameter    C_M_AXI_RESULT_DATA_WIDTH = 32;
parameter    C_M_AXI_RESULT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_WUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_RUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_BUSER_WIDTH = 1;
parameter    C_M_AXI_RESULT_USER_VALUE = 0;
parameter    C_M_AXI_RESULT_PROT_VALUE = 0;
parameter    C_M_AXI_RESULT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_POINT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_SCALAR_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RESULT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_point_AWVALID;
input   m_axi_point_AWREADY;
output  [C_M_AXI_POINT_ADDR_WIDTH - 1:0] m_axi_point_AWADDR;
output  [C_M_AXI_POINT_ID_WIDTH - 1:0] m_axi_point_AWID;
output  [7:0] m_axi_point_AWLEN;
output  [2:0] m_axi_point_AWSIZE;
output  [1:0] m_axi_point_AWBURST;
output  [1:0] m_axi_point_AWLOCK;
output  [3:0] m_axi_point_AWCACHE;
output  [2:0] m_axi_point_AWPROT;
output  [3:0] m_axi_point_AWQOS;
output  [3:0] m_axi_point_AWREGION;
output  [C_M_AXI_POINT_AWUSER_WIDTH - 1:0] m_axi_point_AWUSER;
output   m_axi_point_WVALID;
input   m_axi_point_WREADY;
output  [C_M_AXI_POINT_DATA_WIDTH - 1:0] m_axi_point_WDATA;
output  [C_M_AXI_POINT_WSTRB_WIDTH - 1:0] m_axi_point_WSTRB;
output   m_axi_point_WLAST;
output  [C_M_AXI_POINT_ID_WIDTH - 1:0] m_axi_point_WID;
output  [C_M_AXI_POINT_WUSER_WIDTH - 1:0] m_axi_point_WUSER;
output   m_axi_point_ARVALID;
input   m_axi_point_ARREADY;
output  [C_M_AXI_POINT_ADDR_WIDTH - 1:0] m_axi_point_ARADDR;
output  [C_M_AXI_POINT_ID_WIDTH - 1:0] m_axi_point_ARID;
output  [7:0] m_axi_point_ARLEN;
output  [2:0] m_axi_point_ARSIZE;
output  [1:0] m_axi_point_ARBURST;
output  [1:0] m_axi_point_ARLOCK;
output  [3:0] m_axi_point_ARCACHE;
output  [2:0] m_axi_point_ARPROT;
output  [3:0] m_axi_point_ARQOS;
output  [3:0] m_axi_point_ARREGION;
output  [C_M_AXI_POINT_ARUSER_WIDTH - 1:0] m_axi_point_ARUSER;
input   m_axi_point_RVALID;
output   m_axi_point_RREADY;
input  [C_M_AXI_POINT_DATA_WIDTH - 1:0] m_axi_point_RDATA;
input   m_axi_point_RLAST;
input  [C_M_AXI_POINT_ID_WIDTH - 1:0] m_axi_point_RID;
input  [C_M_AXI_POINT_RUSER_WIDTH - 1:0] m_axi_point_RUSER;
input  [1:0] m_axi_point_RRESP;
input   m_axi_point_BVALID;
output   m_axi_point_BREADY;
input  [1:0] m_axi_point_BRESP;
input  [C_M_AXI_POINT_ID_WIDTH - 1:0] m_axi_point_BID;
input  [C_M_AXI_POINT_BUSER_WIDTH - 1:0] m_axi_point_BUSER;
output   m_axi_scalar_AWVALID;
input   m_axi_scalar_AWREADY;
output  [C_M_AXI_SCALAR_ADDR_WIDTH - 1:0] m_axi_scalar_AWADDR;
output  [C_M_AXI_SCALAR_ID_WIDTH - 1:0] m_axi_scalar_AWID;
output  [7:0] m_axi_scalar_AWLEN;
output  [2:0] m_axi_scalar_AWSIZE;
output  [1:0] m_axi_scalar_AWBURST;
output  [1:0] m_axi_scalar_AWLOCK;
output  [3:0] m_axi_scalar_AWCACHE;
output  [2:0] m_axi_scalar_AWPROT;
output  [3:0] m_axi_scalar_AWQOS;
output  [3:0] m_axi_scalar_AWREGION;
output  [C_M_AXI_SCALAR_AWUSER_WIDTH - 1:0] m_axi_scalar_AWUSER;
output   m_axi_scalar_WVALID;
input   m_axi_scalar_WREADY;
output  [C_M_AXI_SCALAR_DATA_WIDTH - 1:0] m_axi_scalar_WDATA;
output  [C_M_AXI_SCALAR_WSTRB_WIDTH - 1:0] m_axi_scalar_WSTRB;
output   m_axi_scalar_WLAST;
output  [C_M_AXI_SCALAR_ID_WIDTH - 1:0] m_axi_scalar_WID;
output  [C_M_AXI_SCALAR_WUSER_WIDTH - 1:0] m_axi_scalar_WUSER;
output   m_axi_scalar_ARVALID;
input   m_axi_scalar_ARREADY;
output  [C_M_AXI_SCALAR_ADDR_WIDTH - 1:0] m_axi_scalar_ARADDR;
output  [C_M_AXI_SCALAR_ID_WIDTH - 1:0] m_axi_scalar_ARID;
output  [7:0] m_axi_scalar_ARLEN;
output  [2:0] m_axi_scalar_ARSIZE;
output  [1:0] m_axi_scalar_ARBURST;
output  [1:0] m_axi_scalar_ARLOCK;
output  [3:0] m_axi_scalar_ARCACHE;
output  [2:0] m_axi_scalar_ARPROT;
output  [3:0] m_axi_scalar_ARQOS;
output  [3:0] m_axi_scalar_ARREGION;
output  [C_M_AXI_SCALAR_ARUSER_WIDTH - 1:0] m_axi_scalar_ARUSER;
input   m_axi_scalar_RVALID;
output   m_axi_scalar_RREADY;
input  [C_M_AXI_SCALAR_DATA_WIDTH - 1:0] m_axi_scalar_RDATA;
input   m_axi_scalar_RLAST;
input  [C_M_AXI_SCALAR_ID_WIDTH - 1:0] m_axi_scalar_RID;
input  [C_M_AXI_SCALAR_RUSER_WIDTH - 1:0] m_axi_scalar_RUSER;
input  [1:0] m_axi_scalar_RRESP;
input   m_axi_scalar_BVALID;
output   m_axi_scalar_BREADY;
input  [1:0] m_axi_scalar_BRESP;
input  [C_M_AXI_SCALAR_ID_WIDTH - 1:0] m_axi_scalar_BID;
input  [C_M_AXI_SCALAR_BUSER_WIDTH - 1:0] m_axi_scalar_BUSER;
output   m_axi_result_AWVALID;
input   m_axi_result_AWREADY;
output  [C_M_AXI_RESULT_ADDR_WIDTH - 1:0] m_axi_result_AWADDR;
output  [C_M_AXI_RESULT_ID_WIDTH - 1:0] m_axi_result_AWID;
output  [7:0] m_axi_result_AWLEN;
output  [2:0] m_axi_result_AWSIZE;
output  [1:0] m_axi_result_AWBURST;
output  [1:0] m_axi_result_AWLOCK;
output  [3:0] m_axi_result_AWCACHE;
output  [2:0] m_axi_result_AWPROT;
output  [3:0] m_axi_result_AWQOS;
output  [3:0] m_axi_result_AWREGION;
output  [C_M_AXI_RESULT_AWUSER_WIDTH - 1:0] m_axi_result_AWUSER;
output   m_axi_result_WVALID;
input   m_axi_result_WREADY;
output  [C_M_AXI_RESULT_DATA_WIDTH - 1:0] m_axi_result_WDATA;
output  [C_M_AXI_RESULT_WSTRB_WIDTH - 1:0] m_axi_result_WSTRB;
output   m_axi_result_WLAST;
output  [C_M_AXI_RESULT_ID_WIDTH - 1:0] m_axi_result_WID;
output  [C_M_AXI_RESULT_WUSER_WIDTH - 1:0] m_axi_result_WUSER;
output   m_axi_result_ARVALID;
input   m_axi_result_ARREADY;
output  [C_M_AXI_RESULT_ADDR_WIDTH - 1:0] m_axi_result_ARADDR;
output  [C_M_AXI_RESULT_ID_WIDTH - 1:0] m_axi_result_ARID;
output  [7:0] m_axi_result_ARLEN;
output  [2:0] m_axi_result_ARSIZE;
output  [1:0] m_axi_result_ARBURST;
output  [1:0] m_axi_result_ARLOCK;
output  [3:0] m_axi_result_ARCACHE;
output  [2:0] m_axi_result_ARPROT;
output  [3:0] m_axi_result_ARQOS;
output  [3:0] m_axi_result_ARREGION;
output  [C_M_AXI_RESULT_ARUSER_WIDTH - 1:0] m_axi_result_ARUSER;
input   m_axi_result_RVALID;
output   m_axi_result_RREADY;
input  [C_M_AXI_RESULT_DATA_WIDTH - 1:0] m_axi_result_RDATA;
input   m_axi_result_RLAST;
input  [C_M_AXI_RESULT_ID_WIDTH - 1:0] m_axi_result_RID;
input  [C_M_AXI_RESULT_RUSER_WIDTH - 1:0] m_axi_result_RUSER;
input  [1:0] m_axi_result_RRESP;
input   m_axi_result_BVALID;
output   m_axi_result_BREADY;
input  [1:0] m_axi_result_BRESP;
input  [C_M_AXI_RESULT_ID_WIDTH - 1:0] m_axi_result_BID;
input  [C_M_AXI_RESULT_BUSER_WIDTH - 1:0] m_axi_result_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] num_in;
wire   [63:0] point_p;
wire   [63:0] scalar_p;
wire   [63:0] result_p;
reg    point_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    point_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_reg_705;
reg    point_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    point_blk_n_B;
wire    ap_CS_fsm_state24;
reg    point_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln63_reg_738;
reg   [0:0] icmp_ln63_reg_738_pp2_iter1_reg;
reg    scalar_blk_n_AR;
wire    ap_CS_fsm_state19;
reg    scalar_blk_n_R;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln76_reg_757;
reg    scalar_blk_n_AW;
wire    ap_CS_fsm_state32;
reg    scalar_blk_n_B;
wire    ap_CS_fsm_state41;
reg    scalar_blk_n_W;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln84_reg_790;
reg   [0:0] icmp_ln84_reg_790_pp5_iter1_reg;
reg    result_blk_n_AR;
wire    ap_CS_fsm_state36;
reg    result_blk_n_R;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln97_reg_809;
reg    result_blk_n_AW;
wire    ap_CS_fsm_state49;
reg    result_blk_n_W;
reg    ap_enable_reg_pp8_iter2;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln105_reg_842;
reg   [0:0] icmp_ln105_reg_842_pp8_iter1_reg;
reg    result_blk_n_B;
wire    ap_CS_fsm_state57;
reg    point_AWVALID;
wire    point_AWREADY;
reg    point_WVALID;
wire    point_WREADY;
reg    point_ARVALID;
wire    point_ARREADY;
wire    point_RVALID;
reg    point_RREADY;
wire   [31:0] point_RDATA;
wire    point_RLAST;
wire   [0:0] point_RID;
wire   [0:0] point_RUSER;
wire   [1:0] point_RRESP;
wire    point_BVALID;
reg    point_BREADY;
wire   [1:0] point_BRESP;
wire   [0:0] point_BID;
wire   [0:0] point_BUSER;
reg    scalar_AWVALID;
wire    scalar_AWREADY;
reg    scalar_WVALID;
wire    scalar_WREADY;
reg    scalar_ARVALID;
wire    scalar_ARREADY;
wire    scalar_RVALID;
reg    scalar_RREADY;
wire   [31:0] scalar_RDATA;
wire    scalar_RLAST;
wire   [0:0] scalar_RID;
wire   [0:0] scalar_RUSER;
wire   [1:0] scalar_RRESP;
wire    scalar_BVALID;
reg    scalar_BREADY;
wire   [1:0] scalar_BRESP;
wire   [0:0] scalar_BID;
wire   [0:0] scalar_BUSER;
reg    result_AWVALID;
wire    result_AWREADY;
reg    result_WVALID;
wire    result_WREADY;
reg    result_ARVALID;
wire    result_ARREADY;
wire    result_RVALID;
reg    result_RREADY;
wire   [31:0] result_RDATA;
wire    result_RLAST;
wire   [0:0] result_RID;
wire   [0:0] result_RUSER;
wire   [1:0] result_RRESP;
wire    result_BVALID;
reg    result_BREADY;
wire   [1:0] result_BRESP;
wire   [0:0] result_BID;
wire   [0:0] result_BUSER;
reg   [12:0] phi_ln55_reg_348;
reg   [12:0] phi_ln55_reg_348_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [12:0] i_0_reg_360;
reg   [12:0] phi_ln63_reg_371;
reg   [12:0] phi_ln76_reg_382;
reg   [12:0] phi_ln76_reg_382_pp3_iter1_reg;
wire    ap_block_state26_pp3_stage0_iter0;
reg    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [12:0] i1_0_reg_394;
reg   [12:0] phi_ln84_reg_405;
reg   [12:0] phi_ln97_reg_416;
reg   [12:0] phi_ln97_reg_416_pp6_iter1_reg;
wire    ap_block_state43_pp6_stage0_iter0;
reg    ap_block_state44_pp6_stage0_iter1;
wire    ap_block_state45_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
reg   [12:0] i2_0_reg_428;
reg   [12:0] phi_ln105_reg_439;
reg   [63:0] result_addr_reg_684;
reg   [63:0] scalar_addr_reg_691;
reg   [63:0] point_addr_reg_698;
wire   [0:0] icmp_ln55_fu_510_p2;
reg   [0:0] icmp_ln55_reg_705_pp0_iter1_reg;
wire   [12:0] add_ln55_fu_516_p2;
reg   [12:0] add_ln55_reg_709;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] point_addr_read_reg_714;
wire   [0:0] icmp_ln58_fu_527_p2;
reg   [0:0] icmp_ln58_reg_719;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [12:0] i_fu_533_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln59_fu_539_p1;
reg   [63:0] zext_ln59_reg_728;
wire   [0:0] icmp_ln63_fu_551_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state16_pp2_stage0_iter0;
wire    ap_block_state17_pp2_stage0_iter1;
wire    ap_block_state18_pp2_stage0_iter2;
reg    ap_block_state18_io;
reg    ap_block_pp2_stage0_11001;
wire   [12:0] add_ln63_fu_557_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] point_output_buffer_q0;
reg   [31:0] point_output_buffer_load_reg_752;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] icmp_ln76_fu_568_p2;
reg   [0:0] icmp_ln76_reg_757_pp3_iter1_reg;
wire   [12:0] add_ln76_fu_574_p2;
reg   [12:0] add_ln76_reg_761;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] scalar_addr_read_reg_766;
wire   [0:0] icmp_ln79_fu_585_p2;
reg   [0:0] icmp_ln79_reg_771;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state30_pp4_stage0_iter0;
wire    ap_block_state31_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [12:0] i_1_fu_591_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] zext_ln80_fu_597_p1;
reg   [63:0] zext_ln80_reg_780;
wire   [0:0] icmp_ln84_fu_609_p2;
wire    ap_CS_fsm_pp5_stage0;
wire    ap_block_state33_pp5_stage0_iter0;
wire    ap_block_state34_pp5_stage0_iter1;
wire    ap_block_state35_pp5_stage0_iter2;
reg    ap_block_state35_io;
reg    ap_block_pp5_stage0_11001;
wire   [12:0] add_ln84_fu_615_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [31:0] scalar_output_buffer_q0;
reg   [31:0] scalar_output_buffer_load_reg_804;
reg    ap_enable_reg_pp5_iter1;
wire   [0:0] icmp_ln97_fu_626_p2;
reg   [0:0] icmp_ln97_reg_809_pp6_iter1_reg;
wire   [12:0] add_ln97_fu_632_p2;
reg   [12:0] add_ln97_reg_813;
reg    ap_enable_reg_pp6_iter0;
reg   [31:0] result_addr_read_reg_818;
wire   [0:0] icmp_ln100_fu_643_p2;
reg   [0:0] icmp_ln100_reg_823;
wire    ap_CS_fsm_pp7_stage0;
wire    ap_block_state47_pp7_stage0_iter0;
wire    ap_block_state48_pp7_stage0_iter1;
wire    ap_block_pp7_stage0_11001;
wire   [12:0] i_2_fu_649_p2;
reg    ap_enable_reg_pp7_iter0;
wire   [63:0] zext_ln101_fu_655_p1;
reg   [63:0] zext_ln101_reg_832;
wire   [0:0] icmp_ln105_fu_667_p2;
wire    ap_CS_fsm_pp8_stage0;
wire    ap_block_state50_pp8_stage0_iter0;
wire    ap_block_state51_pp8_stage0_iter1;
wire    ap_block_state52_pp8_stage0_iter2;
reg    ap_block_state52_io;
reg    ap_block_pp8_stage0_11001;
wire   [12:0] add_ln105_fu_673_p2;
reg    ap_enable_reg_pp8_iter0;
wire   [31:0] result_output_buffer_q0;
reg   [31:0] result_output_buffer_load_reg_856;
reg    ap_enable_reg_pp8_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state16;
wire    ap_CS_fsm_state25;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state29;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state30;
reg    ap_enable_reg_pp4_iter1;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state33;
wire    ap_CS_fsm_state42;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state43;
reg    ap_enable_reg_pp6_iter2;
wire    ap_CS_fsm_state46;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state47;
reg    ap_enable_reg_pp7_iter1;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state50;
reg   [12:0] point_input_buffer_address0;
reg    point_input_buffer_ce0;
reg    point_input_buffer_we0;
wire   [31:0] point_input_buffer_q0;
reg   [12:0] point_output_buffer_address0;
reg    point_output_buffer_ce0;
reg    point_output_buffer_we0;
wire   [31:0] point_output_buffer_d0;
reg   [12:0] scalar_input_buffer_address0;
reg    scalar_input_buffer_ce0;
reg    scalar_input_buffer_we0;
wire   [31:0] scalar_input_buffer_q0;
reg   [12:0] scalar_output_buffer_address0;
reg    scalar_output_buffer_ce0;
reg    scalar_output_buffer_we0;
wire   [31:0] scalar_output_buffer_d0;
reg   [12:0] result_input_buffer_address0;
reg    result_input_buffer_ce0;
reg    result_input_buffer_we0;
wire   [31:0] result_input_buffer_q0;
reg   [12:0] result_output_buffer_address0;
reg    result_output_buffer_ce0;
reg    result_output_buffer_we0;
wire   [31:0] result_output_buffer_d0;
reg   [12:0] ap_phi_mux_phi_ln55_phi_fu_352_p4;
reg   [12:0] ap_phi_mux_phi_ln76_phi_fu_386_p4;
reg   [12:0] ap_phi_mux_phi_ln97_phi_fu_420_p4;
wire   [63:0] zext_ln55_fu_522_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln63_fu_563_p1;
wire   [63:0] zext_ln76_fu_580_p1;
wire    ap_block_pp4_stage0;
wire   [63:0] zext_ln84_fu_621_p1;
wire   [63:0] zext_ln97_fu_638_p1;
wire    ap_block_pp7_stage0;
wire   [63:0] zext_ln105_fu_679_p1;
wire   [63:0] empty_fu_460_p1;
wire   [63:0] empty_5_fu_480_p1;
wire   [63:0] empty_6_fu_500_p1;
wire    ap_block_pp2_stage0_01001;
wire    ap_block_pp5_stage0_01001;
wire    ap_block_pp8_stage0_01001;
wire   [61:0] result_p5_fu_450_p4;
wire   [61:0] scalar_p3_fu_470_p4;
wire   [61:0] point_p1_fu_490_p4;
reg   [41:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 42'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
end

multiexp_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
multiexp_kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .num_in(num_in),
    .point_p(point_p),
    .scalar_p(scalar_p),
    .result_p(result_p)
);

multiexp_kernel_point_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_POINT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_POINT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_POINT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_POINT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_POINT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_POINT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_POINT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_POINT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_POINT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_POINT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_POINT_CACHE_VALUE ))
multiexp_kernel_point_m_axi_U(
    .AWVALID(m_axi_point_AWVALID),
    .AWREADY(m_axi_point_AWREADY),
    .AWADDR(m_axi_point_AWADDR),
    .AWID(m_axi_point_AWID),
    .AWLEN(m_axi_point_AWLEN),
    .AWSIZE(m_axi_point_AWSIZE),
    .AWBURST(m_axi_point_AWBURST),
    .AWLOCK(m_axi_point_AWLOCK),
    .AWCACHE(m_axi_point_AWCACHE),
    .AWPROT(m_axi_point_AWPROT),
    .AWQOS(m_axi_point_AWQOS),
    .AWREGION(m_axi_point_AWREGION),
    .AWUSER(m_axi_point_AWUSER),
    .WVALID(m_axi_point_WVALID),
    .WREADY(m_axi_point_WREADY),
    .WDATA(m_axi_point_WDATA),
    .WSTRB(m_axi_point_WSTRB),
    .WLAST(m_axi_point_WLAST),
    .WID(m_axi_point_WID),
    .WUSER(m_axi_point_WUSER),
    .ARVALID(m_axi_point_ARVALID),
    .ARREADY(m_axi_point_ARREADY),
    .ARADDR(m_axi_point_ARADDR),
    .ARID(m_axi_point_ARID),
    .ARLEN(m_axi_point_ARLEN),
    .ARSIZE(m_axi_point_ARSIZE),
    .ARBURST(m_axi_point_ARBURST),
    .ARLOCK(m_axi_point_ARLOCK),
    .ARCACHE(m_axi_point_ARCACHE),
    .ARPROT(m_axi_point_ARPROT),
    .ARQOS(m_axi_point_ARQOS),
    .ARREGION(m_axi_point_ARREGION),
    .ARUSER(m_axi_point_ARUSER),
    .RVALID(m_axi_point_RVALID),
    .RREADY(m_axi_point_RREADY),
    .RDATA(m_axi_point_RDATA),
    .RLAST(m_axi_point_RLAST),
    .RID(m_axi_point_RID),
    .RUSER(m_axi_point_RUSER),
    .RRESP(m_axi_point_RRESP),
    .BVALID(m_axi_point_BVALID),
    .BREADY(m_axi_point_BREADY),
    .BRESP(m_axi_point_BRESP),
    .BID(m_axi_point_BID),
    .BUSER(m_axi_point_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(point_ARVALID),
    .I_ARREADY(point_ARREADY),
    .I_ARADDR(point_addr_reg_698),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4096),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(point_RVALID),
    .I_RREADY(point_RREADY),
    .I_RDATA(point_RDATA),
    .I_RID(point_RID),
    .I_RUSER(point_RUSER),
    .I_RRESP(point_RRESP),
    .I_RLAST(point_RLAST),
    .I_AWVALID(point_AWVALID),
    .I_AWREADY(point_AWREADY),
    .I_AWADDR(point_addr_reg_698),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(point_WVALID),
    .I_WREADY(point_WREADY),
    .I_WDATA(point_output_buffer_load_reg_752),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(point_BVALID),
    .I_BREADY(point_BREADY),
    .I_BRESP(point_BRESP),
    .I_BID(point_BID),
    .I_BUSER(point_BUSER)
);

multiexp_kernel_scalar_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SCALAR_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SCALAR_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SCALAR_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SCALAR_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SCALAR_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SCALAR_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SCALAR_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SCALAR_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_SCALAR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SCALAR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SCALAR_CACHE_VALUE ))
multiexp_kernel_scalar_m_axi_U(
    .AWVALID(m_axi_scalar_AWVALID),
    .AWREADY(m_axi_scalar_AWREADY),
    .AWADDR(m_axi_scalar_AWADDR),
    .AWID(m_axi_scalar_AWID),
    .AWLEN(m_axi_scalar_AWLEN),
    .AWSIZE(m_axi_scalar_AWSIZE),
    .AWBURST(m_axi_scalar_AWBURST),
    .AWLOCK(m_axi_scalar_AWLOCK),
    .AWCACHE(m_axi_scalar_AWCACHE),
    .AWPROT(m_axi_scalar_AWPROT),
    .AWQOS(m_axi_scalar_AWQOS),
    .AWREGION(m_axi_scalar_AWREGION),
    .AWUSER(m_axi_scalar_AWUSER),
    .WVALID(m_axi_scalar_WVALID),
    .WREADY(m_axi_scalar_WREADY),
    .WDATA(m_axi_scalar_WDATA),
    .WSTRB(m_axi_scalar_WSTRB),
    .WLAST(m_axi_scalar_WLAST),
    .WID(m_axi_scalar_WID),
    .WUSER(m_axi_scalar_WUSER),
    .ARVALID(m_axi_scalar_ARVALID),
    .ARREADY(m_axi_scalar_ARREADY),
    .ARADDR(m_axi_scalar_ARADDR),
    .ARID(m_axi_scalar_ARID),
    .ARLEN(m_axi_scalar_ARLEN),
    .ARSIZE(m_axi_scalar_ARSIZE),
    .ARBURST(m_axi_scalar_ARBURST),
    .ARLOCK(m_axi_scalar_ARLOCK),
    .ARCACHE(m_axi_scalar_ARCACHE),
    .ARPROT(m_axi_scalar_ARPROT),
    .ARQOS(m_axi_scalar_ARQOS),
    .ARREGION(m_axi_scalar_ARREGION),
    .ARUSER(m_axi_scalar_ARUSER),
    .RVALID(m_axi_scalar_RVALID),
    .RREADY(m_axi_scalar_RREADY),
    .RDATA(m_axi_scalar_RDATA),
    .RLAST(m_axi_scalar_RLAST),
    .RID(m_axi_scalar_RID),
    .RUSER(m_axi_scalar_RUSER),
    .RRESP(m_axi_scalar_RRESP),
    .BVALID(m_axi_scalar_BVALID),
    .BREADY(m_axi_scalar_BREADY),
    .BRESP(m_axi_scalar_BRESP),
    .BID(m_axi_scalar_BID),
    .BUSER(m_axi_scalar_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(scalar_ARVALID),
    .I_ARREADY(scalar_ARREADY),
    .I_ARADDR(scalar_addr_reg_691),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4096),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(scalar_RVALID),
    .I_RREADY(scalar_RREADY),
    .I_RDATA(scalar_RDATA),
    .I_RID(scalar_RID),
    .I_RUSER(scalar_RUSER),
    .I_RRESP(scalar_RRESP),
    .I_RLAST(scalar_RLAST),
    .I_AWVALID(scalar_AWVALID),
    .I_AWREADY(scalar_AWREADY),
    .I_AWADDR(scalar_addr_reg_691),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(scalar_WVALID),
    .I_WREADY(scalar_WREADY),
    .I_WDATA(scalar_output_buffer_load_reg_804),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(scalar_BVALID),
    .I_BREADY(scalar_BREADY),
    .I_BRESP(scalar_BRESP),
    .I_BID(scalar_BID),
    .I_BUSER(scalar_BUSER)
);

multiexp_kernel_result_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RESULT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RESULT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RESULT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RESULT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RESULT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RESULT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RESULT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RESULT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RESULT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RESULT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RESULT_CACHE_VALUE ))
multiexp_kernel_result_m_axi_U(
    .AWVALID(m_axi_result_AWVALID),
    .AWREADY(m_axi_result_AWREADY),
    .AWADDR(m_axi_result_AWADDR),
    .AWID(m_axi_result_AWID),
    .AWLEN(m_axi_result_AWLEN),
    .AWSIZE(m_axi_result_AWSIZE),
    .AWBURST(m_axi_result_AWBURST),
    .AWLOCK(m_axi_result_AWLOCK),
    .AWCACHE(m_axi_result_AWCACHE),
    .AWPROT(m_axi_result_AWPROT),
    .AWQOS(m_axi_result_AWQOS),
    .AWREGION(m_axi_result_AWREGION),
    .AWUSER(m_axi_result_AWUSER),
    .WVALID(m_axi_result_WVALID),
    .WREADY(m_axi_result_WREADY),
    .WDATA(m_axi_result_WDATA),
    .WSTRB(m_axi_result_WSTRB),
    .WLAST(m_axi_result_WLAST),
    .WID(m_axi_result_WID),
    .WUSER(m_axi_result_WUSER),
    .ARVALID(m_axi_result_ARVALID),
    .ARREADY(m_axi_result_ARREADY),
    .ARADDR(m_axi_result_ARADDR),
    .ARID(m_axi_result_ARID),
    .ARLEN(m_axi_result_ARLEN),
    .ARSIZE(m_axi_result_ARSIZE),
    .ARBURST(m_axi_result_ARBURST),
    .ARLOCK(m_axi_result_ARLOCK),
    .ARCACHE(m_axi_result_ARCACHE),
    .ARPROT(m_axi_result_ARPROT),
    .ARQOS(m_axi_result_ARQOS),
    .ARREGION(m_axi_result_ARREGION),
    .ARUSER(m_axi_result_ARUSER),
    .RVALID(m_axi_result_RVALID),
    .RREADY(m_axi_result_RREADY),
    .RDATA(m_axi_result_RDATA),
    .RLAST(m_axi_result_RLAST),
    .RID(m_axi_result_RID),
    .RUSER(m_axi_result_RUSER),
    .RRESP(m_axi_result_RRESP),
    .BVALID(m_axi_result_BVALID),
    .BREADY(m_axi_result_BREADY),
    .BRESP(m_axi_result_BRESP),
    .BID(m_axi_result_BID),
    .BUSER(m_axi_result_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(result_ARVALID),
    .I_ARREADY(result_ARREADY),
    .I_ARADDR(result_addr_reg_684),
    .I_ARID(1'd0),
    .I_ARLEN(32'd4096),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(result_RVALID),
    .I_RREADY(result_RREADY),
    .I_RDATA(result_RDATA),
    .I_RID(result_RID),
    .I_RUSER(result_RUSER),
    .I_RRESP(result_RRESP),
    .I_RLAST(result_RLAST),
    .I_AWVALID(result_AWVALID),
    .I_AWREADY(result_AWREADY),
    .I_AWADDR(result_addr_reg_684),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(result_WVALID),
    .I_WREADY(result_WREADY),
    .I_WDATA(result_output_buffer_load_reg_856),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(result_BVALID),
    .I_BREADY(result_BREADY),
    .I_BRESP(result_BRESP),
    .I_BID(result_BID),
    .I_BUSER(result_BUSER)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
point_input_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(point_input_buffer_address0),
    .ce0(point_input_buffer_ce0),
    .we0(point_input_buffer_we0),
    .d0(point_addr_read_reg_714),
    .q0(point_input_buffer_q0)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
point_output_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(point_output_buffer_address0),
    .ce0(point_output_buffer_ce0),
    .we0(point_output_buffer_we0),
    .d0(point_output_buffer_d0),
    .q0(point_output_buffer_q0)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
scalar_input_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(scalar_input_buffer_address0),
    .ce0(scalar_input_buffer_ce0),
    .we0(scalar_input_buffer_we0),
    .d0(scalar_addr_read_reg_766),
    .q0(scalar_input_buffer_q0)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
scalar_output_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(scalar_output_buffer_address0),
    .ce0(scalar_output_buffer_ce0),
    .we0(scalar_output_buffer_we0),
    .d0(scalar_output_buffer_d0),
    .q0(scalar_output_buffer_q0)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
result_input_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_input_buffer_address0),
    .ce0(result_input_buffer_ce0),
    .we0(result_input_buffer_we0),
    .d0(result_addr_read_reg_818),
    .q0(result_input_buffer_q0)
);

multiexp_kernel_point_input_buffer #(
    .DataWidth( 32 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
result_output_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(result_output_buffer_address0),
    .ce0(result_output_buffer_ce0),
    .we0(result_output_buffer_we0),
    .d0(result_output_buffer_d0),
    .q0(result_output_buffer_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((point_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state16)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((point_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state30))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state30);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state33) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((scalar_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state33)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((scalar_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter0_state43) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state43)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state43);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state47) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp7_exit_iter0_state47) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state47);
        end else if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp7_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state50) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((result_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state50)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state50);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if (((result_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i1_0_reg_394 <= 13'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_fu_585_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i1_0_reg_394 <= i_1_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        i2_0_reg_428 <= 13'd0;
    end else if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln100_fu_643_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        i2_0_reg_428 <= i_2_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_reg_360 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln58_fu_527_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_0_reg_360 <= i_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((result_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        phi_ln105_reg_439 <= 13'd0;
    end else if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln105_fu_667_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        phi_ln105_reg_439 <= add_ln105_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln55_reg_348 <= add_ln55_reg_709;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln55_reg_348 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((point_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        phi_ln63_reg_371 <= 13'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln63_fu_551_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_ln63_reg_371 <= add_ln63_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_ln76_reg_382 <= 13'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln76_reg_382 <= add_ln76_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((scalar_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        phi_ln84_reg_405 <= 13'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln84_fu_609_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        phi_ln84_reg_405 <= add_ln84_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        phi_ln97_reg_416 <= 13'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        phi_ln97_reg_416 <= add_ln97_reg_813;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln55_reg_709 <= add_ln55_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln76_reg_761 <= add_ln76_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        add_ln97_reg_813 <= add_ln97_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln100_reg_823 <= icmp_ln100_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        icmp_ln105_reg_842 <= icmp_ln105_fu_667_p2;
        icmp_ln105_reg_842_pp8_iter1_reg <= icmp_ln105_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln55_reg_705 <= icmp_ln55_fu_510_p2;
        icmp_ln55_reg_705_pp0_iter1_reg <= icmp_ln55_reg_705;
        phi_ln55_reg_348_pp0_iter1_reg <= phi_ln55_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln58_reg_719 <= icmp_ln58_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln63_reg_738 <= icmp_ln63_fu_551_p2;
        icmp_ln63_reg_738_pp2_iter1_reg <= icmp_ln63_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln76_reg_757 <= icmp_ln76_fu_568_p2;
        icmp_ln76_reg_757_pp3_iter1_reg <= icmp_ln76_reg_757;
        phi_ln76_reg_382_pp3_iter1_reg <= phi_ln76_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln79_reg_771 <= icmp_ln79_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln84_reg_790 <= icmp_ln84_fu_609_p2;
        icmp_ln84_reg_790_pp5_iter1_reg <= icmp_ln84_reg_790;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln97_reg_809 <= icmp_ln97_fu_626_p2;
        icmp_ln97_reg_809_pp6_iter1_reg <= icmp_ln97_reg_809;
        phi_ln97_reg_416_pp6_iter1_reg <= phi_ln97_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_705 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        point_addr_read_reg_714 <= point_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        point_addr_reg_698[61 : 0] <= empty_6_fu_500_p1[61 : 0];
        result_addr_reg_684[61 : 0] <= empty_fu_460_p1[61 : 0];
        scalar_addr_reg_691[61 : 0] <= empty_5_fu_480_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln63_reg_738 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        point_output_buffer_load_reg_752 <= point_output_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln97_reg_809 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        result_addr_read_reg_818 <= result_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln105_reg_842 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        result_output_buffer_load_reg_856 <= result_output_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln76_reg_757 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        scalar_addr_read_reg_766 <= scalar_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln84_reg_790 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        scalar_output_buffer_load_reg_804 <= scalar_output_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln100_fu_643_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        zext_ln101_reg_832[12 : 0] <= zext_ln101_fu_655_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln58_fu_527_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        zext_ln59_reg_728[12 : 0] <= zext_ln59_fu_539_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        zext_ln80_reg_780[12 : 0] <= zext_ln80_fu_597_p1[12 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_510_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_fu_527_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_551_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln76_fu_568_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln79_fu_585_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln84_fu_609_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_626_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state43 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state43 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln100_fu_643_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln105_fu_667_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if (((result_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_705 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_ln55_phi_fu_352_p4 = add_ln55_reg_709;
    end else begin
        ap_phi_mux_phi_ln55_phi_fu_352_p4 = phi_ln55_reg_348;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_phi_ln76_phi_fu_386_p4 = add_ln76_reg_761;
    end else begin
        ap_phi_mux_phi_ln76_phi_fu_386_p4 = phi_ln76_reg_382;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        ap_phi_mux_phi_ln97_phi_fu_420_p4 = add_ln97_reg_813;
    end else begin
        ap_phi_mux_phi_ln97_phi_fu_420_p4 = phi_ln97_reg_416;
    end
end

always @ (*) begin
    if (((result_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((point_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        point_ARVALID = 1'b1;
    end else begin
        point_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((point_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        point_AWVALID = 1'b1;
    end else begin
        point_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((point_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        point_BREADY = 1'b1;
    end else begin
        point_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        point_RREADY = 1'b1;
    end else begin
        point_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln63_reg_738_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        point_WVALID = 1'b1;
    end else begin
        point_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        point_blk_n_AR = m_axi_point_ARREADY;
    end else begin
        point_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        point_blk_n_AW = m_axi_point_AWREADY;
    end else begin
        point_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        point_blk_n_B = m_axi_point_BVALID;
    end else begin
        point_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_705 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        point_blk_n_R = m_axi_point_RVALID;
    end else begin
        point_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln63_reg_738_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        point_blk_n_W = m_axi_point_WREADY;
    end else begin
        point_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        point_input_buffer_address0 = zext_ln59_fu_539_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        point_input_buffer_address0 = zext_ln55_fu_522_p1;
    end else begin
        point_input_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        point_input_buffer_ce0 = 1'b1;
    end else begin
        point_input_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_705_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        point_input_buffer_we0 = 1'b1;
    end else begin
        point_input_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        point_output_buffer_address0 = zext_ln63_fu_563_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        point_output_buffer_address0 = zext_ln59_reg_728;
    end else begin
        point_output_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        point_output_buffer_ce0 = 1'b1;
    end else begin
        point_output_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln58_reg_719 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        point_output_buffer_we0 = 1'b1;
    end else begin
        point_output_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((result_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
        result_ARVALID = 1'b1;
    end else begin
        result_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((result_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
        result_AWVALID = 1'b1;
    end else begin
        result_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((result_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        result_BREADY = 1'b1;
    end else begin
        result_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        result_RREADY = 1'b1;
    end else begin
        result_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (icmp_ln105_reg_842_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        result_WVALID = 1'b1;
    end else begin
        result_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        result_blk_n_AR = m_axi_result_ARREADY;
    end else begin
        result_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        result_blk_n_AW = m_axi_result_AWREADY;
    end else begin
        result_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        result_blk_n_B = m_axi_result_BVALID;
    end else begin
        result_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        result_blk_n_R = m_axi_result_RVALID;
    end else begin
        result_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (icmp_ln105_reg_842_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        result_blk_n_W = m_axi_result_WREADY;
    end else begin
        result_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        result_input_buffer_address0 = zext_ln101_fu_655_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        result_input_buffer_address0 = zext_ln97_fu_638_p1;
    end else begin
        result_input_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
        result_input_buffer_ce0 = 1'b1;
    end else begin
        result_input_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln97_reg_809_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        result_input_buffer_we0 = 1'b1;
    end else begin
        result_input_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        result_output_buffer_address0 = zext_ln105_fu_679_p1;
    end else if (((1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0))) begin
        result_output_buffer_address0 = zext_ln101_reg_832;
    end else begin
        result_output_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)))) begin
        result_output_buffer_ce0 = 1'b1;
    end else begin
        result_output_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln100_reg_823 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1))) begin
        result_output_buffer_we0 = 1'b1;
    end else begin
        result_output_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((scalar_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        scalar_ARVALID = 1'b1;
    end else begin
        scalar_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((scalar_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        scalar_AWVALID = 1'b1;
    end else begin
        scalar_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((scalar_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        scalar_BREADY = 1'b1;
    end else begin
        scalar_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        scalar_RREADY = 1'b1;
    end else begin
        scalar_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln84_reg_790_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        scalar_WVALID = 1'b1;
    end else begin
        scalar_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        scalar_blk_n_AR = m_axi_scalar_ARREADY;
    end else begin
        scalar_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        scalar_blk_n_AW = m_axi_scalar_AWREADY;
    end else begin
        scalar_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        scalar_blk_n_B = m_axi_scalar_BVALID;
    end else begin
        scalar_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        scalar_blk_n_R = m_axi_scalar_RVALID;
    end else begin
        scalar_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln84_reg_790_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        scalar_blk_n_W = m_axi_scalar_WREADY;
    end else begin
        scalar_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        scalar_input_buffer_address0 = zext_ln80_fu_597_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        scalar_input_buffer_address0 = zext_ln76_fu_580_p1;
    end else begin
        scalar_input_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        scalar_input_buffer_ce0 = 1'b1;
    end else begin
        scalar_input_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln76_reg_757_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        scalar_input_buffer_we0 = 1'b1;
    end else begin
        scalar_input_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        scalar_output_buffer_address0 = zext_ln84_fu_621_p1;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        scalar_output_buffer_address0 = zext_ln80_reg_780;
    end else begin
        scalar_output_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        scalar_output_buffer_ce0 = 1'b1;
    end else begin
        scalar_output_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln79_reg_771 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        scalar_output_buffer_we0 = 1'b1;
    end else begin
        scalar_output_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((point_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_510_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln55_fu_510_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln58_fu_527_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln58_fu_527_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((point_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln63_fu_551_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln63_fu_551_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((scalar_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((point_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln76_fu_568_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln76_fu_568_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln79_fu_585_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln79_fu_585_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((scalar_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln84_fu_609_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln84_fu_609_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((result_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((scalar_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln97_fu_626_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln97_fu_626_p2 == 1'd1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if (~((icmp_ln100_fu_643_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((icmp_ln100_fu_643_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((result_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln105_fu_667_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln105_fu_667_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((result_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln105_fu_673_p2 = (phi_ln105_reg_439 + 13'd1);

assign add_ln55_fu_516_p2 = (ap_phi_mux_phi_ln55_phi_fu_352_p4 + 13'd1);

assign add_ln63_fu_557_p2 = (phi_ln63_reg_371 + 13'd1);

assign add_ln76_fu_574_p2 = (ap_phi_mux_phi_ln76_phi_fu_386_p4 + 13'd1);

assign add_ln84_fu_615_p2 = (phi_ln84_reg_405 + 13'd1);

assign add_ln97_fu_632_p2 = (ap_phi_mux_phi_ln97_phi_fu_420_p4 + 13'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((point_RVALID == 1'b0) & (icmp_ln55_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((point_RVALID == 1'b0) & (icmp_ln55_reg_705 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((scalar_RVALID == 1'b0) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((scalar_RVALID == 1'b0) & (icmp_ln76_reg_757 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state35_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((result_RVALID == 1'b0) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((result_RVALID == 1'b0) & (icmp_ln97_reg_809 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((point_RVALID == 1'b0) & (icmp_ln55_reg_705 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((point_WREADY == 1'b0) & (icmp_ln63_reg_738_pp2_iter1_reg == 1'd0));
end

assign ap_block_state18_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp3_stage0_iter1 = ((scalar_RVALID == 1'b0) & (icmp_ln76_reg_757 == 1'd0));
end

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((scalar_WREADY == 1'b0) & (icmp_ln84_reg_790_pp5_iter1_reg == 1'd0));
end

assign ap_block_state35_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_pp6_stage0_iter1 = ((result_RVALID == 1'b0) & (icmp_ln97_reg_809 == 1'd0));
end

assign ap_block_state45_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state52_io = ((result_WREADY == 1'b0) & (icmp_ln105_reg_842_pp8_iter1_reg == 1'd0));
end

assign ap_block_state52_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign empty_5_fu_480_p1 = scalar_p3_fu_470_p4;

assign empty_6_fu_500_p1 = point_p1_fu_490_p4;

assign empty_fu_460_p1 = result_p5_fu_450_p4;

assign i_1_fu_591_p2 = (i1_0_reg_394 + 13'd1);

assign i_2_fu_649_p2 = (i2_0_reg_428 + 13'd1);

assign i_fu_533_p2 = (i_0_reg_360 + 13'd1);

assign icmp_ln100_fu_643_p2 = ((i2_0_reg_428 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_667_p2 = ((phi_ln105_reg_439 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_510_p2 = ((ap_phi_mux_phi_ln55_phi_fu_352_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_527_p2 = ((i_0_reg_360 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_551_p2 = ((phi_ln63_reg_371 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_568_p2 = ((ap_phi_mux_phi_ln76_phi_fu_386_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_585_p2 = ((i1_0_reg_394 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_609_p2 = ((phi_ln84_reg_405 == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_626_p2 = ((ap_phi_mux_phi_ln97_phi_fu_420_p4 == 13'd4096) ? 1'b1 : 1'b0);

assign point_output_buffer_d0 = (point_input_buffer_q0 + 32'd1);

assign point_p1_fu_490_p4 = {{point_p[63:2]}};

assign result_output_buffer_d0 = (result_input_buffer_q0 + 32'd1);

assign result_p5_fu_450_p4 = {{result_p[63:2]}};

assign scalar_output_buffer_d0 = (scalar_input_buffer_q0 + 32'd1);

assign scalar_p3_fu_470_p4 = {{scalar_p[63:2]}};

assign zext_ln101_fu_655_p1 = i2_0_reg_428;

assign zext_ln105_fu_679_p1 = phi_ln105_reg_439;

assign zext_ln55_fu_522_p1 = phi_ln55_reg_348_pp0_iter1_reg;

assign zext_ln59_fu_539_p1 = i_0_reg_360;

assign zext_ln63_fu_563_p1 = phi_ln63_reg_371;

assign zext_ln76_fu_580_p1 = phi_ln76_reg_382_pp3_iter1_reg;

assign zext_ln80_fu_597_p1 = i1_0_reg_394;

assign zext_ln84_fu_621_p1 = phi_ln84_reg_405;

assign zext_ln97_fu_638_p1 = phi_ln97_reg_416_pp6_iter1_reg;

always @ (posedge ap_clk) begin
    result_addr_reg_684[63:62] <= 2'b00;
    scalar_addr_reg_691[63:62] <= 2'b00;
    point_addr_reg_698[63:62] <= 2'b00;
    zext_ln59_reg_728[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln80_reg_780[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln101_reg_832[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //multiexp_kernel
